<!DOCTYPE html>
<html>
<head>
    <title>Validation App</title>
    <!--  (c) 2015,2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Wed Apr 20 2016 20:34:49 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Apr 20 2016 20:34:49 GMT-0700 (MST)";
        var CHECKSUM = 30979496878;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('TSUtilities', {
    singleton: true,
    
    timeLockKeyPrefix: 'rally.technicalservices.timesheet.weeklock',
    approvalKeyPrefix: 'rally.technicalservices.timesheet.status',
    deletionKeyPrefix: 'rally.technicalservices.timesheet.deletion',
    pinKeyPrefix     : 'rally.technicalservices.timesheet.pin',

    archiveSuffix: '~archived',
    
    loadWsapiRecords: function(config,returnOperation){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    if ( returnOperation ) {
                        deferred.resolve(operation);
                    } else {
                        deferred.resolve(records);
                    }
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    loadWsapiRecordsWithParallelPages: function(config, msg) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        var count_check_config = Ext.clone(config);
        count_check_config.limit = 1;
        count_check_config.pageSize = 1;
        count_check_config.fetch = ['ObjectID'];
        
        this.loadWsapiRecords(count_check_config, true).then({
            success: function(operation) {                
                config.pageSize = 200;
                config.limit = config.pageSize;
                var total = operation.resultSet.totalRecords;
                var page_count = Math.ceil(total/config.pageSize);
     
                var promises = [];
                Ext.Array.each(_.range(1,page_count+1), function(page_index) {
                    var config_clone = Ext.clone(config);
                    config_clone.currentPage = page_index;
                    promises.push(function() {
                        var percentage = parseInt( page_index * 100 / page_count, 10);
                        var message = msg || "Loading values";
                        Rally.getApp().setLoading(message + " (" + percentage + "%)");
                        return me.loadWsapiRecords(config_clone); 
                    });
                });
                CA.techservices.promise.ParallelThrottle.throttle(promises, 6, me).then({
                        success: function(results){
                            deferred.resolve( Ext.Array.flatten(results) );
                        },
                        failure: function(msg) {
                            deferred.reject(msg);
                        }
                });
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    getPreferenceProject: function() {
        var app = Rally.getApp();
        
        return app.getSetting('preferenceProjectRef');
    },
    
    isEditableProjectForCurrentUser: function(projectRef,scope) {
        var app = scope || Rally.getApp(),
            me = this;

        if ( this.currentUserIsAdmin(scope) ) {
            return true;
        }
        
        var project_oid = this._getOidFromRef(projectRef);
        var editor_permissions = Ext.Array.filter(app.getContext().getPermissions().userPermissions, function(permission){
            if ( permission.Role != "Editor" && permission.Role != "ProjectAdmin") {
                return false;
            }
            
            return ( me._getOidFromRef(permission._ref) == project_oid );
        });
        
        console.log(editor_permissions);
        return ( editor_permissions.length > 0 );
    },
    
    getEditableProjectForCurrentUser: function() {
        var app = Rally.getApp();
        if ( this._currentUserCanWrite() ) {
            return app.getContext().getProjectRef();
        }
        
        var workspace_oid = this._getOidFromRef( app.getContext().getWorkspaceRef());
        
        var editor_permissions = Ext.Array.filter(app.getContext().getPermissions().userPermissions, function(permission){
            if ( Ext.isEmpty(permission.Workspace) ) {
                return false;
            }
            var permission_oid = this._getOidFromRef(permission.Workspace);

            //console.log('comparing ', workspace_oid, permission_oid, permission);
            if (workspace_oid  !=  permission_oid) {
                return false;
            }
                        
            return ( permission.Role == "Editor" || permission.Role == "ProjectAdmin");
        },this);
        
        
        if ( editor_permissions.length > 0 ) {
            return editor_permissions[0]._ref;
        }
        return false;
    },
    
    _getOidFromRef: function(ref) {
        var ref_array = ref.replace(/\.js$/,'').split(/\//);
        return ref_array[ref_array.length-1].replace(/\.js/,'');
    },
    
    // true if sub or workspace admin
    currentUserIsAdmin: function(scope){
        var app = scope || Rally.getApp();
        
        console.log('current user:', app.getContext().getUser());
        if ( this.currentUserIsSubAdmin() ) {
            return true;
        }
        
        var permissions = app.getContext().getPermissions().userPermissions;

        var workspace_admin_list = Ext.Array.filter(permissions, function(p) {
            return ( p.Role == "Workspace Admin" || p.Role == "Subscription Admin");
        });
        
        var current_workspace_ref = app.getContext().getWorkspace()._ref;
        var is_workspace_admin = false;
                
        if ( workspace_admin_list.length > 0 ) {
            Ext.Array.each(workspace_admin_list, function(p){
                
                if (current_workspace_ref.replace(/\.js$/,'') == p._ref.replace(/\.js$/,'')) {
                    is_workspace_admin = true;
                }
            });
        }
        
        return is_workspace_admin;
    },
    
    currentUserIsSubAdmin: function(scope) {
        var app = scope || Rally.getApp();
                
        var permissions = app.getContext().getPermissions().userPermissions;

        var sub_admin_list = Ext.Array.filter(permissions, function(p) {
            return ( p.Role == 'Subscription Admin' );
        });
        
        return ( sub_admin_list.length > 0 );
    },
    
    _currentUserCanWrite: function() {
        var app = Rally.getApp();
        
        //console.log('_currentUserCanWrite',app.getContext().getUser(), app.getContext().getUser().SubscriptionAdmin);
        if ( app.getContext().getUser().SubscriptionAdmin ) {
            return true;
        }
        
        var permissions = app.getContext().getPermissions().userPermissions;

        var workspace_admin_list = Ext.Array.filter(permissions, function(p) {
            return ( p.Role == "Workspace Admin" || p.Role == "Subscription Admin");
        });
        
        var current_workspace_ref = app.getContext().getWorkspace()._ref;
        var can_unlock = false;
                
        if ( workspace_admin_list.length > 0 ) {
            Ext.Array.each(workspace_admin_list, function(p){
                
                if (current_workspace_ref.replace(/\.js$/,'') == p._ref.replace(/\.js$/,'')) {
                    can_unlock = true;
                }
            });
        }
        
        return can_unlock;
    },
    
    _currentUserCanUnapprove: function() {
        return this.currentUserIsAdmin();
    }
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define("CA.apps.charts.Colors", {
    
    singleton: true, 
    
    // RGB values obtained from here: http://ux-blog.rallydev.com/?cat=23
    grey4: "#C0C0C0",  // $grey4
    orange: "#FF8200",  // $orange
    gold: "#F6A900",  // $gold
    yellow: "#FAD200",  // $yellow
    lime: "#8DC63F",  // $lime
    green_dk: "#1E7C00",  // $green_dk
    blue_link: "#337EC6",  // $blue_link
    blue: "#005EB8",  // $blue
    blue_dark: '#00386e', 
    blue_light: '#b2cee9',
    purple : "#7832A5",  // $purple,
    pink : "#DA1884",   // $pink,
    grey7 : "#666",

    cumulativeFlowColors : function() {
        return [
            this.grey4, this.orange, this.gold, this.yellow, this.lime, this.green_dk, this.blue_link, this.blue, this.purple, this.pink
        ];
    },

    burnLineColor : function (){ return this.blue; },
    burnColumnColor : function() { return this.lime; },
    
    getConsistentBarColors: function() { return [this.grey4, this.blue_light, this.blue, this.blue_dark ]; }
});

Ext.define('CA.techservices.container.ChartWithDescription',{
    extend: 'Ext.container.Container',
    alias:  'widget.tschartwithdescription',
    
    layout: 'hbox',
    
    items: [
        {xtype:'container', itemId:'chart_box', flex: 1},
        {xtype:'container', itemId:'description_box'}
    ],
    
    setDescription: function(description) {
        var box = this.down('#description_box');
        box.removeAll();
        
        if ( Ext.isEmpty(description) ) {
            return;
        }
        box.add({
            xtype:'panel',
            ui: 'info-box',
            title: '<span class="icon-info-circle"> </span>',
            collapsible: true,
            collapsed: true,
            collapseDirection: 'right',
            headerPosition: 'left',
            width: 375,
            height: 375,
            margin: 5,
            html: description
            
        });
    },
    
    setChart: function(config) {
        var box = this.down('#chart_box');
        box.removeAll();
        
        var chart_config = Ext.apply({
            xtype:'rallychart',
            loadMask: false,
            chartColors: CA.apps.charts.Colors.getConsistentBarColors()
        }, config);
        
        box.add(chart_config);
    }
});
Ext.define("CA.techservices.app.ChartApp", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    padding: 5,
    
    description: '<em>No Description Available</em>',
    
    items: [
        {xtype:'container', width:'98%', items:[
            {xtype:'container',itemId:'banner_box'},
            {xtype:'tschartwithdescription' },
            {xtype:'container',itemId:'additional_display_box'}
        ]}
    ],

    launch: function() {
        this.setDescription();
    }, 
    
    setDescription: function() {
        this.down('tschartwithdescription').setDescription(this.description);
    },
    
    clearBanner: function() {
        this.down('#banner_box').removeAll();
    },
    
    addToBanner: function(config) {
        return this.down('#banner_box').add(config);
    },
    
    clearAdditionalDisplay: function() {
        this.down('#additional_display_box').removeAll();
    },
    
    addToAdditionalDisplay: function(config) {
        return this.down('#additional_display_box').add(config);
    },
    
    setChart: function(config) {
        return this.down('tschartwithdescription').setChart(config);
    },
    
    showDrillDown: function(stories, title) {
        var me = this;

        var store = Ext.create('Rally.data.custom.Store', {
            data: stories,
            pageSize: 2000
        });
        
        Ext.create('Rally.ui.dialog.Dialog', {
            id        : 'detailPopup',
            title     : title,
            width     : Ext.getBody().getWidth() - 50,
            height    : Ext.getBody().getHeight() - 50,
            closable  : true,
            layout    : 'border',
            items     : [
            {
                xtype                : 'rallygrid',
                region               : 'center',
                layout               : 'fit',
                sortableColumns      : true,
                showRowActionsColumn : false,
                showPagingToolbar    : false,
                columnCfgs           : [
                    {
                        dataIndex : 'FormattedID',
                        text: "id"
                    },
                    {
                        dataIndex : 'Name',
                        text: "Name",
                        flex: 1
                    },
                    {
                        dataIndex: 'ScheduleState',
                        text: 'Schedule State'
                    },
                    {
                        dataIndex: 'PlanEstimate',
                        text: 'Plan Estimate'
                    }
                ],
                store : store
            }]
        }).show();
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
    
    
    
});

Ext.define('Rally.technicalservices.ValidationRules',{

    ruleFnPrefix: 'ruleFn_',
    requiredFields: undefined,

    constructor: function(config){
        Ext.apply(this, config);
    },

    getRules: function(){
        var ruleFns = [],
            ruleRe = new RegExp('^' + this.ruleFnPrefix);

        for (var fn in this)
        {
            if (ruleRe.test(fn)){
                ruleFns.push(fn);
            }
        }
        return ruleFns;
    },
    //ruleFn_missingFields: function(r) {
    //    var missingFields = [];
    //
    //    _.each(this.requiredFields, function (f) {
    //        if (!r.get(f)) {
    //            missingFields.push(f);
    //        }
    //    });
    //    if (missingFields.length === 0) {
    //        return null;
    //    }
    //    return Ext.String.format('Missing fields: {0}', missingFields.join(','));
    //},

    statics: {
        getUserFriendlyRuleLabel: function(ruleName){
            switch(ruleName){
                case 'ruleFn_missingFields':
                    return 'Required Fields are missing';
                case 'ruleFn_unscheduledIterationScheduleState':
                    return 'Story is In-Progress with unscheduled Iteration';
                case 'ruleFn_blockedNotInProgress':
                    return 'Story is Blocked but not In-Progress';
                case 'ruleFn_sprintCompleteNotAccepted':
                    return 'Story in past Iteration not complete';
                case 'ruleFn_noStoriesForFeature':
                    return 'Feature has no Stories';
                case 'ruleFn_FeatureHasNotBeenStarted':
                    return 'Feature not started';
                case 'ruleFn_featureHasNotBeenCompleted':
                    return 'Feature not completed.';
                case 'ruleFn_featureMissingFields':
                    return 'Feature fields Missing';
                case 'ruleFn_storyMissingFields':
                    return 'Story fields Missing';
                case 'ruleFn_FeatureHasNoParent':
                    return 'Feature has no parent';
                case 'ruleFn_storyHasNoFeature':
                    return 'Story has no parent Feature';
                case 'ruleFn_storyHasIterationWithoutRelease':
                    return 'Story has Iteration without Release';
                case 'ruleFn_storyBlockedWithoutReason':
                    return 'Story Blocked without Reason';
                case 'ruleFn_storyRelaseDoesNotMatchFeatureRelease':
                    return 'Story Release is not Feature Release';
                case 'ruleFn_storyPlanEstimate':
                    return 'Story has no points';
                case 'ruleFn_featureHasNoPoints':
                    return 'Feature has no points';
                case 'ruleFn_storyRiskDescription':
                    return 'Story Risk has no Description';
                case 'ruleFn_featureRiskDescription':
                    return 'Feature Risk has no Description';
                case 'ruleFn_taskMissingFields':
                    return 'Task fields Missing';
                case 'ruleFn_projectMissingWIP':
                    return 'Project Missing WIP';
                case 'ruleFn_iterationMissingFields':
                    return 'Iteration fields Missing';
                case 'ruleFn_FeatureDateIssue':
                    return 'Feature Date Issue';
                case 'ruleFn_isProgramRisk':
                    return 'Feature is program level risk';
            }
            return ruleName;
        }
    }
});
Ext.define('Rally.technicalservices.UserStoryValidationRules',{
    extend: 'Rally.technicalservices.ValidationRules',
    //ruleFnPrefix: 'ruleFn_',
    requiredFields: undefined, //
    features: undefined,
    orderedScheduleStates: undefined,
    definedScheduleStateIndex: undefined,

    constructor: function(config){
        Ext.apply(this, config);
        this.requiredFields = ['Owner','Description'];
    },
//    ruleFn_unscheduledIterationScheduleState: function(r){
//        /**
//         * If Iteration = unscheduled and state In-Progress raise flag
//         */
//        var scheduleStateIdx = _.indexOf(this.orderedScheduleStates, r.get('ScheduleState'));
//
//        if (!r.get('Iteration') && scheduleStateIdx > this.definedScheduleStateIndex){
//            return {
//                rule: 'ruleFn_unscheduledIterationScheduleState',
//                text: Ext.String.format('<li>Story is In-Progress with unscheduled Iteration', r.get('ScheduleState'))
//            };
//        }
//        return null;
//    },
//    ruleFn_blockedNotInProgress: function(r){
//        /**
//         * Story is blocked, schedulestate must be In-Progress
//         */
//        if (r.get('Blocked')){
//            if (r.get('ScheduleState') != 'In-Progress'){
//                return Ext.String.format('<li>Story is Blocked but not In-Progress ({0})', r.get('ScheduleState'));
//            }
//        }
//        return null;
//    },
    ruleFn_storyMissingFields: function(r) {
        var missingFields = [];

        _.each(this.requiredFields, function (f) {
            if (!r.get(f) && r.getField(f)) {
                var name = r.getField(f).displayName;
                missingFields.push(name);
            }
        });
        if (missingFields.length === 0) {
            return null;
        }
        return {
            rule: 'ruleFn_storyMissingFields',
            text: Ext.String.format('<li>Story fields Missing: {0}', missingFields.join(','))
        };
    },
    ruleFn_storyHasNoFeature: function(r){
        if (!r.get('Feature')){
            return {
                rule: 'ruleFn_storyHasNoFeature',
                text: '<li>Story has no parent Feature.'
            };
        }
        return null;
    },
    ruleFn_storyPlanEstimate: function(r){
        if (r.get('PlanEstimate')==0){
            return {
                rule: 'ruleFn_storyPlanEstimate',
                text: '<li>Story has no points'
            };
        }
        return null;
    },
//    ruleFn_storyHasIterationWithoutRelease: function(r){
//        if (!r.get('Release') && r.get('Iteration')){
//            return {
//                rule: 'ruleFn_storyHasIterationWithoutRelease',
//                text: Ext.String.format('<li>Story has Iteration [{0}] without a Release.', r.get('Iteration').Name)
//            };
//        }
//        return null;
//    },
//    ruleFn_storyBlockedWithoutReason: function(r){
//        if (r.get('Blocked') && !r.get('BlockedReason')){
//            return {
//                rule: 'ruleFn_storyBlockedWithoutReason',
//                text: '<li>Story is blocked without reason.'
//            };
//            //if (r.get('Blocker')){
//            //    return '<li>Story is blocked without reason.';
//            //} else {
//            //    return '<li>Story is blocked without a reason.';
//            //}
//        }
//        return null;
//    },
//    ruleFn_storyRelaseDoesNotMatchFeatureRelease: function(r){
//        var msg = null;
//
//        var release = r.get('Release');
//        if (r.get('Feature') && release){
//
//            if (!r.get('Feature').Release || r.get('Feature').Release.Name != release.Name ||
//                r.get('Feature').Release.ReleaseStartDate != release.ReleaseStartDate ||
//                r.get('Feature').Release.ReleaseDate != release.ReleaseDate){
//                return {
//                    rule: 'ruleFn_storyRelaseDoesNotMatchFeatureRelease',
//                    text: '<li>Story Release is not Feature Release'
//                };
//            }
//        }
//        return msg;
//    },
//    ruleFn_storyRiskDescription: function(r){
//        if (r.get('c_Risk') && !r.get('c_RiskStatement')){
//            return {
//                rule: 'ruleFn_storyRiskDescription',
//                text: '<li>Story Risk has no Description'
//            };
//        }
//        return null;
//    }
});

Ext.define('Rally.technicalservices.Validator',{

    validationRuleObj: undefined,
    records: undefined,

    ruleViolationData: undefined,

    constructor: function(config){
        Ext.apply(this,config);
        this._validate();
    },

    _validate: function(){
        if (this.validationRuleObj && this.records){
            var validationRuleObj = this.validationRuleObj,
                ruleViolationRecords = [],
                totalRecords = 0,
                rules = validationRuleObj.getRules();

            _.each(this.records, function(r){
                totalRecords ++;
                var violations = [];
                Ext.Array.each(rules, function(rule){
                    var v = validationRuleObj[rule](r);
                    if (v && !_.isEmpty(v)){
                        violations.push(v);
                        if (v.stopProcessing == true){
                            return false;
                        }
                        //violations.push({rule: rule, text: v});
                    }
                });

                if (violations.length > 0){
                    ruleViolationRecords.push({
                        _ref: r.get('_ref'),
                        FormattedID: r.get('FormattedID'),
                        Name: r.get('Name'),
                        violations: violations,
                        Project: r.get('Project').Name,
                        _type: r.get('_type')
                    });
                }
            });
            this.ruleViolationData = ruleViolationRecords;
        }
    }
});
Ext.define("TSValidationApp", {
extend: 'CA.techservices.app.ChartApp',
    
    description: '<strong>Data Validation</strong>' +
                '<p/>' + 
                'The stacked bar chart shows a count of items that fail the various validation rules.  Each bar ' +
                'represents a team.' +
                '<p/>' + 
                'Click on a column on the chart to see a list of records that failed a validation test, along with a ' +
                'list of other validation issues for the same issues',
    
    integrationHeaders : {
        name : "TSValidationApp"
    },
    
    /**
     * Configurations
     */
    allReleasesText: 'All Releases',
    portfolioItemFeature: 'PortfolioItem/Feature',
    featureFetchFields: ['FormattedID','Name','Project','Release','State','AcceptedLeafStoryCount','LeafStoryCount','PlannedStartDate','PlannedEndDate','Owner','ActualStartDate','Parent','ValueScore','c_ValueMetricKPI','c_Risk','c_RiskDescription','LeafStoryPlanEstimateTotal'],
    storyFetchFields: ['FormattedID','Name','Project','Iteration','Release','ScheduleState','Feature','Owner','PlanEstimate','Blocked','BlockedReason','Blocker','c_Risk','c_RiskStatement'],
    taskFetchFields: ['FormattedID','Name','Project','Iteration','Release','State','Owner'],


    typeMapping: {
        'portfolioitem/feature': 'Feature',
        'hierarchicalrequirement': 'User Story',
        'task'                   : 'Task'
    },

    chartColors: [ '#2f7ed8', '#8bbc21', '#910000',
        '#492970', '#f28f43', '#145499','#77a1e5', '#c42525', '#a6c96a',
        '#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9','#aa1925',
        '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1','#1aadce',
        '#4572A7', '#AA4643', '#89A54E', '#80699B', '#3D96AE',
        '#DB843D', '#92A8CD', '#A47D7C', '#B5CA92'],

    selectedRelease: null,
    selectedIteration: null,

    
    launch: function() {
        this.callParent();
        
        this._addSelectors();
    }, 
    
    _addSelectors: function() {
        
        this.timebox_selector = this.addToBanner({
            xtype: 'rallyreleasecombobox',
            margin: 5,
            stateful: true,
            stateId: this.getContext().getScopedStateId('ts-validation-timebox'),
            stateEvents:['change'],
            listeners: {
                scope: this,
                change: this._updateData
            }
        });
    },
        
    getIterationFiltersForIterations:function(release){
        if (!release){
            return [];
        }

        return [{
            property: 'StartDate',
            operator: '>=',
            value: Rally.util.DateTime.toIsoString(release.get('ReleaseStartDate'))
        },{
            property: 'EndDate',
            operator: '<=',
            value: Rally.util.DateTime.toIsoString(release.get('ReleaseDate'))
        }];
        
    },

    getReleaseFilters: function(release){

        if (!release){
            return [];
        }

        return [{
            property: 'Release.Name',
            value: release.get('Name')
        },{
            property: 'Release.ReleaseStartDate',
            value: Rally.util.DateTime.toIsoString(release.get('ReleaseStartDate'))
        },{
            property: 'Release.ReleaseDate',
            value: Rally.util.DateTime.toIsoString(release.get('ReleaseDate'))
        }];
    },
    
    _updateData: function() {
        this.setLoading('Loading data...');
        this.timebox = this.timebox_selector.getRecord();
        
        var release = this.timebox;
        
        var promises = [
            //this._fetchData(this.portfolioItemFeature, this.featureFetchFields, this.getReleaseFilters(release)),
            this._fetchData('HierarchicalRequirement', this.storyFetchFields, this.getReleaseFilters(release)),
            this._fetchScheduleStates(),
        //    this._fetchData('Task', this.taskFetchFields, this.getReleaseFilters(release).concat(this.getIterationFilters(iteration))),
        //    this._fetchData('Project', ['Name'], this.getProjectFilters()),
        //    this._fetchData('Preference',['Name','Value'], [{property:'Name',operator:'contains',value:'project-wip:'}]),
        //    this._fetchData('Iteration',['Name','PlannedVelocity','Project'], this.getIterationFiltersForIterations(release))
        ];
        
        Deft.Promise.all(promises).then({
            scope: this,
            success: function(results) {
                this.setLoading(false);
                var stories          = results[0];
                var schedule_states  = results[1];
                
                var storyRules = Ext.create('Rally.technicalservices.UserStoryValidationRules',{
                    orderedScheduleStates: schedule_states,
                    definedScheduleStateIndex: _.indexOf(schedule_states, 'Defined')
                });
                                
                var storyValidator = Ext.create('Rally.technicalservices.Validator',{
                    validationRuleObj: storyRules,
                    records: stories
                });
                
                this.validatorData = storyValidator.ruleViolationData;
                this._makeChart(this.validatorData);
            },
            failure: function(msg) {
                this.setLoading(false);
                Ext.Msg.alert('Problem Loading Data', msg);
            }
        });
    },
    
    _fetchData: function(modelType, fetchFields, filters){

        var deferred = Ext.create('Deft.Deferred'),
            store = Ext.create('Rally.data.wsapi.Store',{
                model: modelType,
                limit: 'Infinity',
                fetch: fetchFields,
                filters: filters
            });

        store.load({
            scope: this,
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    deferred.reject(operation);
                }
            }
        });
        return deferred;
    },
    
    _fetchScheduleStates: function(){
        var deferred = Ext.create('Deft.Deferred');
        var scheduleStates = [];
        Rally.data.ModelFactory.getModel({
            type: 'UserStory',
            fetch: ['ValueIndex','StringValue'],
            sorters: [{
                property: 'ValueIndex',
                direction: 'ASC'
            }],
            success: function(model) {
                model.getField('ScheduleState').getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        Ext.Array.each(records, function(allowedValue) {
                            //each record is an instance of the AllowedAttributeValue model
                            scheduleStates.push(allowedValue.get('StringValue'));
                        });
                        deferred.resolve(scheduleStates);
                    }
                });
            }
        });

        return deferred;
    },
    
    _getCategories: function(data) {
        return Ext.Array.unique(
            Ext.Array.map(
                data, function(datum) { return datum.Project; }
            )
        ).sort();
    },
    
    _getSeries: function(data, projects) {
        var me = this;        
        var violations = Ext.Array.flatten(
            Ext.Array.map(data, function(datum){
                return datum.violations;
            })
        );
        
        var rules = Ext.Array.map(violations, function(violation){ return violation.rule; });
        
        console.log('rules', rules);
        
        var series = Ext.Array.map(Ext.Array.unique(rules), function(rule){
            return {
                name: Rally.technicalservices.ValidationRules.getUserFriendlyRuleLabel(rule),
                data: [],
                stack: 1,
                rule: rule
            };
        });
        
        console.log('series', series);
        
        Ext.Array.each(series, function(s) {
            var counts = [];
            Ext.Array.each(projects, function(project){
                var count_in_project = 0;
                var records = [];
                Ext.Array.each(data, function(datum){
                    Ext.Array.each(datum.violations, function(violation){
                        if ( violation.rule == s.rule && datum.Project == project ) {
                            count_in_project = count_in_project + 1;
                            records.push(datum);
                        }
                    });
                });
                counts.push({ 
                    y: count_in_project,
                    _records: records,
                    events: {
                        click: function() {
                            me.showDrillDown(this._records,'');
                        }
                    }
                });
            });
            s.data = counts;
        });
        
        return series;
    },
    
    _getChartConfig: function() {
        var me = this;
        return {
            chart: { type:'column' },
            title: { text: 'Validation Results' },
            xAxis: {},
            yAxis: { 
                min: 0,
                title: { text: 'Count' }
            },
            plotOptions: {
                column: {
                    stacking: 'normal'
                }
            }
        }
    },
    
    _makeChart: function(data) {
        var me = this;
        
        this.logger.log('_makeChart', data);

        var categories = this._getCategories(data);
        var series = this._getSeries(data,categories);
        
        this.setChart({
            chartData: { series: series, categories: categories },
            chartConfig: this._getChartConfig()
        });
    },
    
    showDrillDown: function(records, title) {
        var me = this;

        console.log(records);
        var store = Ext.create('Rally.data.custom.Store', {
            data: records,
            pageSize: 2000
        });
        
        Ext.create('Rally.ui.dialog.Dialog', {
            id        : 'detailPopup',
            title     : title,
            width     : 400,
            height    : 400,
            closable  : true,
            layout    : 'border',
            items     : [
            {
                xtype                : 'rallygrid',
                region               : 'center',
                layout               : 'fit',
                sortableColumns      : true,
                showRowActionsColumn : false,
                showPagingToolbar    : false,
                columnCfgs           : [
                    {
                        dataIndex : 'FormattedID',
                        text: "id"
                    },
                    {
                        dataIndex : 'Name',
                        text: "Name",
                        flex: 1
                    },
                    {
                        dataIndex: 'violations',
                        text: 'Violations',
                        flex: 1,
                        renderer: function(value, meta, record) {
                            console.log('value', value);
                            if ( Ext.isEmpty(value) ) { return ""; }
                            var display_value = "<ul>";
                            Ext.Array.each(value, function(violation){
                                display_value = display_value + violation.text;
                            });
                            display_value = display_value + "</ul>";
                            console.log('display-value', display_value);
                            return display_value;
                        }
                    }
                ],
                store : store
            }]
        }).show();
    }
    
});

            
               Rally.launchApp('TSValidationApp', {
                   name: 'Validation App'
               });
        });
    </script>
    
    <style type="text/css">

.x-panel-body-info-box {
    color: black;
    font-size: 10px;
    background: white;
    padding: 5px;
}

.x-panel-info-box {
    border: 0px dashed blue;
}
    
.x-panel-header-info-box {
    background-color: #ddd;
    color: white;
    font-size: 14px;
}

.x-panel-header-info-box-vertical {
    padding: 3px;
    color: white;
}


.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>