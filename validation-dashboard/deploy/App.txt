<!DOCTYPE html>
<html>
<head>
    <title>Validation App</title>
    <!--  (c) 2015,2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Fri Sep 30 2016 16:08:14 GMT-0400 (EDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Sep 30 2016 16:08:14 GMT-0400 (EDT)";
        var BUILDER = "srhoads";
        var CHECKSUM = 1021949615787;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns) -->
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    
    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('TSUtilities', {
    singleton: true,
      
    loadWsapiRecords: function(config,returnOperation){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
                
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    if ( returnOperation ) {
                        deferred.resolve(operation);
                    } else {
                        deferred.resolve(records);
                    }
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    loadLookbackRecords: function(config,returnOperation){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
                
        var default_config = {
            fetch: ['ObjectID'],
            "sort": { "_ValidFrom": -1 },
            "removeUnauthorizedSnapshots":true
        };
        Ext.create('Rally.data.lookback.SnapshotStore', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    if ( returnOperation ) {
                        deferred.resolve(operation);
                    } else {
                        deferred.resolve(records);
                    }
                } else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    loadWsapiRecordsWithParallelPages: function(config, msg) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        var count_check_config = Ext.clone(config);
        count_check_config.limit = 1;
        count_check_config.pageSize = 1;
        count_check_config.fetch = ['ObjectID'];
        
        this.loadWsapiRecords(count_check_config, true).then({
            success: function(operation) {                
                config.pageSize = 200;
                config.limit = config.pageSize;
                var total = operation.resultSet.totalRecords;
                var page_count = Math.ceil(total/config.pageSize);
     
                var promises = [];
                Ext.Array.each(_.range(1,page_count+1), function(page_index) {
                    var config_clone = Ext.clone(config);
                    config_clone.currentPage = page_index;
                    promises.push(function() {
                        var percentage = parseInt( page_index * 100 / page_count, 10);
                        var message = msg || "Loading values";
                        Rally.getApp().setLoading(message + " (" + percentage + "%)");
                        return me.loadWsapiRecords(config_clone); 
                    });
                });
                CA.techservices.promise.ParallelThrottle.throttle(promises, 6, me).then({
                        success: function(results){
                            deferred.resolve( Ext.Array.flatten(results) );
                        },
                        failure: function(msg) {
                            deferred.reject(msg);
                        }
                });
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    getPreferenceProject: function() {
        var app = Rally.getApp();
        
        return app.getSetting('preferenceProjectRef');
    },
    
    isEditableProjectForCurrentUser: function(projectRef,scope) {
        var app = scope || Rally.getApp(),
            me = this;

        if ( this.currentUserIsAdmin(scope) ) {
            return true;
        }
        
        var project_oid = this._getOidFromRef(projectRef);
        var editor_permissions = Ext.Array.filter(app.getContext().getPermissions().userPermissions, function(permission){
            if ( permission.Role != "Editor" && permission.Role != "ProjectAdmin") {
                return false;
            }
            
            return ( me._getOidFromRef(permission._ref) == project_oid );
        });
        
        return ( editor_permissions.length > 0 );
    },
    
    getEditableProjectForCurrentUser: function() {
        var app = Rally.getApp();
        if ( this._currentUserCanWrite() ) {
            return app.getContext().getProjectRef();
        }
        
        var workspace_oid = this._getOidFromRef( app.getContext().getWorkspaceRef());
        
        var editor_permissions = Ext.Array.filter(app.getContext().getPermissions().userPermissions, function(permission){
            if ( Ext.isEmpty(permission.Workspace) ) {
                return false;
            }
            var permission_oid = this._getOidFromRef(permission.Workspace);

            //console.log('comparing ', workspace_oid, permission_oid, permission);
            if (workspace_oid  !=  permission_oid) {
                return false;
            }
                        
            return ( permission.Role == "Editor" || permission.Role == "ProjectAdmin");
        },this);
        
        
        if ( editor_permissions.length > 0 ) {
            return editor_permissions[0]._ref;
        }
        return false;
    },
    
    _getOidFromRef: function(ref) {
        var ref_array = ref.replace(/\.js$/,'').split(/\//);
        return ref_array[ref_array.length-1].replace(/\.js/,'');
    },
    
    // true if sub or workspace admin
    currentUserIsAdmin: function(scope){
        var app = scope || Rally.getApp();
        
        console.log('current user:', app.getContext().getUser());
        if ( this.currentUserIsSubAdmin() ) {
            return true;
        }
        
        var permissions = app.getContext().getPermissions().userPermissions;

        var workspace_admin_list = Ext.Array.filter(permissions, function(p) {
            return ( p.Role == "Workspace Admin" || p.Role == "Subscription Admin");
        });
        
        var current_workspace_ref = app.getContext().getWorkspace()._ref;
        var is_workspace_admin = false;
                
        if ( workspace_admin_list.length > 0 ) {
            Ext.Array.each(workspace_admin_list, function(p){
                
                if (current_workspace_ref.replace(/\.js$/,'') == p._ref.replace(/\.js$/,'')) {
                    is_workspace_admin = true;
                }
            });
        }
        
        return is_workspace_admin;
    },
    
    currentUserIsSubAdmin: function(scope) {
        var app = scope || Rally.getApp();
                
        var permissions = app.getContext().getPermissions().userPermissions;

        var sub_admin_list = Ext.Array.filter(permissions, function(p) {
            return ( p.Role == 'Subscription Admin' );
        });
        
        return ( sub_admin_list.length > 0 );
    },
    
    getStartFieldForTimeboxType: function(type) {
        if ( type.toLowerCase() == "release" ) {
            return 'ReleaseStartDate';
        }
        
        return 'StartDate';
    },
    
    getEndFieldForTimeboxType: function(type) {
        if ( type.toLowerCase() == "release" ) {
            return 'ReleaseDate';
        }
        
        return 'EndDate';
    },

    getAllowedValues: function(model, field_name) {
        var deferred = Ext.create('Deft.Deferred');
        
        Rally.data.ModelFactory.getModel({
            type: model,
            success: function(model) {
                model.getField(field_name).getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        var values = Ext.Array.map(records, function(record) {
                            return record.get('StringValue');
                        });
                        deferred.resolve(values);
                    }
                });
            },
            failure: function(msg) { deferred.reject('Error loading field values: ' + msg); }
        });
        return deferred;
    },
	
    getPortfolioItemTypes: function(workspace) {
        var deferred = Ext.create('Deft.Deferred');
                
        var store_config = {
            fetch: ['Name','ElementName','TypePath'],
            model: 'TypeDefinition',
            filters: [
                {
                    property: 'Parent.Name',
                    operator: '=',
                    value: 'Portfolio Item'
                },
                {
                    property: 'Creatable',
                    operator: '=',
                    value: 'true'
                }
            ],
            autoLoad: true,
            listeners: {
                load: function(store, records, successful) {
                    if (successful){
                        deferred.resolve(records);
                    } else {
                        deferred.reject('Failed to load types');
                    }
                }
            }
        };
        
        if ( !Ext.isEmpty(workspace) ) {            
            store_config.context = { 
                project:null,
                workspace: workspace._ref ? workspace._ref : workspace.get('_ref')
            };
        }
                
        var store = Ext.create('Rally.data.wsapi.Store', store_config );
                    
        return deferred.promise;
    },


    getAllWorkspaces: function() {
        var deferred = Ext.create('Deft.Deferred');
        var config = {
            model: 'Subscription',
            fetch: ['ObjectID','Workspaces']
        };
        
        TSUtilities.loadWsapiRecords(config).then({
            scope: this,
            success: function(subs) {
                var sub = subs[0];
                sub.getCollection('Workspaces').load({
                    fetch: ['ObjectID','Name','State'],
                    sorters: [{property:'Name'}],
                    callback: function(workspaces,operation,success){
                        
                        var open_workspaces = Ext.Array.filter(workspaces, function(ws) {
                            return ( ws.get('State') == "Open" ) ;
                        });
                        deferred.resolve(open_workspaces);
                    }
                });
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    getWorkspaces: function() {
        var deferred = Ext.create('Deft.Deferred');
        var config = {
            model: 'Subscription',
            fetch: ['ObjectID','Workspaces']
        };
        
        TSUtilities.loadWsapiRecords(config).then({
            scope: this,
            success: function(subs) {
                var sub = subs[0];
                sub.getCollection('Workspaces').load({
                    fetch: ['ObjectID','Name','State'],
                    sorters: [{property:'Name'}],
                    callback: function(workspaces,operation,success){
                        
                        var open_workspaces = Ext.Array.filter(workspaces, function(ws) {
                            if ( Rally.getApp().getSetting('showAllWorkspaces') == false ) {
                                return ( ws.get('ObjectID') == Rally.getApp().getContext().getWorkspace().ObjectID );
                            }
                            
                            return ( ws.get('State') == "Open" ) ;
                        });
                        deferred.resolve(open_workspaces);
                    }
                });
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },

});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.util.Utilities', {
    singleton: true,
    hashToArray: function(hash) {
        var result = [];
        for ( var key in hash ) {
            result.push(hash[key]);
        }
        return result;
    },
    daysBetweenWithFraction: function(begin_date_js,end_date_js,skip_weekends){

        var days_between = Rally.technicalservices.util.Utilities.daysBetween(begin_date_js, end_date_js, skip_weekends);

        if ( typeof(begin_date_js) == "string" ) {
           begin_date_js = Rally.util.DateTime.fromIsoString(begin_date_js);
        }
        if ( typeof(end_date_js) == "string" ) {
            end_date_js = Rally.util.DateTime.fromIsoString(end_date_js);
        }

        var end_date_beginning_of_day = new Date(Ext.clone(end_date_js).setHours(0,0,0,0)),
            begin_date_beginning_of_day = new Date(Ext.clone(begin_date_js).setHours(0,0,0,0)),
            add_minutes = 0,
            delta_minutes = 0;

        if (this.isWeekday(end_date_js)) {
            add_minutes = Rally.util.DateTime.getDifference(end_date_js, end_date_beginning_of_day, 'minute');
        }
        if (this.isWeekday(begin_date_js)) {
            delta_minutes = Rally.util.DateTime.getDifference(begin_date_js, begin_date_beginning_of_day, 'minute');
        }
        var min = days_between * 1440 + add_minutes - delta_minutes;
        if (min > 0){
            min = Math.max(min/1440,0.01);
        } else {
            min = 0;
        }
        return Number(min.toFixed(2));
    },
    daysBetween: function(begin_date_js,end_date_js,skip_weekends){

        if ( typeof(begin_date_js) == "string" ) {
            begin_date_js = Rally.util.DateTime.fromIsoString(begin_date_js);
        }
        if ( typeof(end_date_js) == "string" ) {
            end_date_js = Rally.util.DateTime.fromIsoString(end_date_js);
        }
        
        var dDate1 = Ext.clone(begin_date_js).setHours(0,0,0,0);
        var dDate2 = Ext.clone(end_date_js).setHours(0,0,0,0);
        
        if ( dDate1 == dDate2 ) { return 1; }
        if (typeof dDate1 === "number") { dDate1 = new Date(dDate1); }
        if (typeof dDate2 === "number") { dDate2 = new Date(dDate2); }
            
        if ( !skip_weekends ) {
            return Math.abs( Rally.util.DateTime.getDifference(dDate1,dDate2,'day') );
        } else {
            // shift to the following Monday
            if (!this.isWeekday(dDate1)) {
                dDate1 = this.shiftDateToMonday(dDate1);
            }
            if (!this.isWeekday(dDate2)) {
                dDate2 = this.shiftDateToMonday(dDate2);
            }


            // from the sOverflow
            var iWeeks, iDateDiff, iAdjust = 0;
            if (dDate2 < dDate1) 
            { 
                var x = dDate2;
                dDate2 = dDate1;
                dDate1 = x;
            }
            var iWeekday1 = dDate1.getDay(); // day of week
            var iWeekday2 = dDate2.getDay();
            iWeekday1 = (iWeekday1 == 0) ? 7 : iWeekday1; // change Sunday from 0 to 7
            iWeekday2 = (iWeekday2 == 0) ? 7 : iWeekday2;
            if ((iWeekday1 > 5) && (iWeekday2 > 5)) iAdjust = 1; // adjustment if both days on weekend
            iWeekday1 = (iWeekday1 > 5) ? 5 : iWeekday1; // only count weekdays
            iWeekday2 = (iWeekday2 > 5) ? 5 : iWeekday2;
    
            // calculate differnece in weeks (1000mS * 60sec * 60min * 24hrs * 7 days = 604800000)
            iWeeks = Math.floor((dDate2.getTime() - dDate1.getTime()) / 604800000)
    
            if (iWeekday1 <= iWeekday2) {
              iDateDiff = (iWeeks * 5) + (iWeekday2 - iWeekday1)
            } else {
              iDateDiff = ((iWeeks + 1) * 5) - (iWeekday1 - iWeekday2)
            }
    
            iDateDiff -= iAdjust // take into account both days on weekend
    
            if ( iDateDiff < 1 ) { iDateDiff = 1; }
            //console.log(iDateDiff,begin_date_js,end_date_js);
            return (iDateDiff); 
        }
    },

    isWeekday: function(check_date) {
        var weekday = true;
        var day = check_date.getDay();
        
        if ( day === 0 || day === 6 ) {
            weekday = false;
        }
        return weekday;
    },
    shiftDateToMonday: function(check_date) {
        var day = check_date.getDay();
        
        var delta = 0;
        
        if ( day === 0 ) {
            // it's Sunday
            delta = 1;
        }
        if ( day === 6 ) {
            delta = 2;
        }
        
        var shifted_date = check_date;
        if ( delta > 0 ) {
            shifted_date = new Date(check_date.setHours(0));
            shifted_date = Rally.util.DateTime.add(shifted_date,"day",delta);
        }
        return shifted_date;
    },
    /*
     * compress size is the point at which to move to weeks instead of days
     */
    arrayOfDaysBetween: function(begin_date_js, end_date_js, skip_weekends, compress_size ) {
        var the_array = [];
        if ( typeof(begin_date_js) == "string" ) {
            begin_date_js = Rally.util.DateTime.fromIsoString(begin_date_js);
        }
        if ( typeof(end_date_js) == "string" ) {
            end_date_js = Rally.util.DateTime.fromIsoString(end_date_js);
        }
        if ( begin_date_js > end_date_js ) {
            var swap_holder = end_date_js;
            end_date_js = begin_date_js;
            begin_date_js = swap_holder;
        }
                
        var dDate1 = Ext.clone(begin_date_js).setHours(0,0,0,0);
        var dDate2 = Ext.clone(end_date_js).setHours(0,0,0,0);
        
        var number_of_days = this.daysBetween(begin_date_js,end_date_js,skip_weekends);
        
        var add_value = 1;
        var add_unit = 'day';
        
        if ( Ext.isNumber(compress_size) && number_of_days > compress_size ) {
            add_value = 7;
        }
        
        if ( number_of_days <= 2 ) {
            add_value = 30;
            add_unit = 'minute';
            dDate2 = Ext.clone(end_date_js).setHours(23,59,0,0);
        }
       
        
        var check_date = new Date(dDate1);
        
        while (check_date <= dDate2) {
            if ( !skip_weekends || this.isWeekday(check_date) || add_value === 7 || add_unit == 'minute' ) {
                the_array.push(check_date);
            }
            check_date = Rally.util.DateTime.add(check_date,add_unit,add_value);
        }
        
        return the_array;
    }
    
});
Ext.define('recordHolder',{
    data: {},
    constructor: function(config) {
        Ext.apply(this, config);
    },
    
    get: function(field) {
        return this.data[field];
    }
});

Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    
    saveCSVToFile:function(csv,file_name,type_object){
        if (type_object === undefined){
            type_object = {type:'text/csv;charset=utf-8'};
        }
        this.saveAs(csv,file_name, type_object);
    },
    
    saveAs: function(textToWrite, fileName)
    {
        this.logger.log('saveAs:', fileName);
        
        if (Ext.isIE9m){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for IE9 and below."});
            return;
        }

        var textFileAsBlob = null;
        try {
            textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        }
        catch(e){
            this.logger.log('Caught an error ', e);
            
            window.BlobBuilder = window.BlobBuilder ||
                        window.WebKitBlobBuilder ||
                    window.MozBlobBuilder ||
                    window.MSBlobBuilder;
            if (window.BlobBuilder ) { //&&  e.name === 'TypeError'){
                bb = new BlobBuilder();
                bb.append([textToWrite]);
                textFileAsBlob = bb.getBlob("text/plain");
            }

        }

        if (!textFileAsBlob){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for this browser."});
            return;
        }

        var fileNameToSaveAs = fileName;

        if (Ext.isIE10p){
            window.navigator.msSaveOrOpenBlob(textFileAsBlob,fileNameToSaveAs); // Now the user will have the option of clicking the Save button and the Open button.
            return;
        }

        var url = this.createObjectURL(textFileAsBlob);

        if (url){
            var downloadLink = document.createElement("a");
            if ("download" in downloadLink){
                downloadLink.download = fileNameToSaveAs;
            } else {
                //Open the file in a new tab
                downloadLink.target = "_blank";
            }

            downloadLink.innerHTML = "Download File";
            downloadLink.href = url;
            if (!Ext.isChrome){
                // Firefox requires the link to be added to the DOM
                // before it can be clicked.
                downloadLink.onclick = this.destroyClickedElement;
                downloadLink.style.display = "none";
                document.body.appendChild(downloadLink);
            }
            downloadLink.click();
        } else {
            Rally.ui.notify.Notifier.showError({message: "Export is not supported "});
        }

    },
    createObjectURL: function ( file ) {
        if ( window.webkitURL ) {
            return window.webkitURL.createObjectURL( file );
        } else if ( window.URL && window.URL.createObjectURL ) {
            return window.URL.createObjectURL( file );
        } else {
            return null;
        }
    },
    saveTextAsFile: function(textToWrite, fileName) {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    convertDataArrayToCSVText: function(data_array, requestedFieldHash){
       
        var text = '';
        Ext.each(Object.keys(requestedFieldHash), function(key){
            text += requestedFieldHash[key] + ',';
        });
        text = text.replace(/,$/,'\n');
        
        Ext.each(data_array, function(d){
            Ext.each(Object.keys(requestedFieldHash), function(key){
                if (d[key]){
                    if (typeof d[key] === 'object'){
                        if (d[key].FormattedID) {
                            text += Ext.String.format("\"{0}\",",d[key].FormattedID ); 
                        } else if (d[key].Name) {
                            text += Ext.String.format("\"{0}\",",d[key].Name );                    
                        } else if (!isNaN(Date.parse(d[key]))){
                            text += Ext.String.format("\"{0}\",",Rally.util.DateTime.formatWithDefaultDateTime(d[key]));
                        }else {
                            text += Ext.String.format("\"{0}\",",d[key].toString());
                        }
                    } else {
                        text += Ext.String.format("\"{0}\",",d[key] );                    
                    }
                } else {
                    text += ',';
                }
            },this);
            text = text.replace(/,$/,'\n');
        },this);
        return text;
    },
    _getCSVFromWsapiBackedGrid: function(grid,skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.create('Rally.data.wsapi.Store',{
            fetch: grid.getStore().config.fetch,
            filters: grid.getStore().config.filters,
            model: grid.getStore().config.model,
            pageSize: 200
        });
        
        var columns = grid.columns;
        
        var record_count = grid.getStore().getTotalCount(),
            page_size = grid.getStore().pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        Deft.Promise.all(promises).then({
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    getCSVFromRows: function(scope, grid, rows) {
        var me = this;
        var columns = grid.columns;
        var store = grid.getStore();
        
        console.log('getCSVFromRows');
        
        var model = grid.model;

        var csv = [];
        
        csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
        
        Ext.Array.each(rows,function(row){
            if ( Ext.isFunction(row.getData) ) {
                csv.push( me._getCSVFromRecord(row, grid, store) );
                return;
            }
            csv.push( me._getCSVFromRecord(Ext.create('recordHolder', { data:row}), grid, store) );
        });
        
        csv = csv.join('\r\n');
        return csv;
    },
    
    // custom grid assumes there store is fully loaded
    _getCSVFromCustomBackedGrid: function(grid, skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.clone( grid.getStore() );
        var columns = grid.columns;
        Rally.getApp().setLoading("Generating CSV...");
        
        var record_count = store.getTotalCount(),
            page_size = store.pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        
        Deft.Promise.all(promises).then({
            scope: this,
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    _getHeadersFromGrid: function(grid) {
        var headers = [];        
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.hidden ) { return; }
            
            if ( column.dataIndex || column.renderer ) {
                if ( column.csvText ) {
                    headers.push(column.csvText.replace('&nbsp;',' '));
                } else if ( column.text )  {
                    headers.push(column.text.replace('&nbsp;',' '));
                }
            }
        });
        
        return headers;
    },
    
    _getColumnNamesFromGrid: function(grid) {
        var names = [];
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.dataIndex || column.renderer ) {
                names.push(column.dataIndex);
            }
        });
        
        return names;
    },
    /*
     * will render using your grid renderer.  If you want it to ignore the grid renderer, 
     * have the column set _csvIgnoreRender: true
     */
    getCSVFromGrid:function(app, grid, skip_headers){
        this.logger.log("Exporting grid with store type:", Ext.getClassName(grid.getStore()));
        
        if ( Ext.getClassName(grid.getStore()) != "Rally.data.custom.Store" ) {
            return this._getCSVFromWsapiBackedGrid(grid,skip_headers);
        }
        
        return this._getCSVFromCustomBackedGrid(grid,skip_headers);
    },
    loadStorePage: function(grid, store, columns, page, total_pages){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('loadStorePage',page, total_pages);

        store.loadPage(page, {
            callback: function (records) {
                var csv = [];
                Rally.getApp().setLoading(Ext.String.format('Page {0} of {1} loaded',page, total_pages));
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    csv.push( this._getCSVFromRecord(record, grid, store) );
                }
                deferred.resolve(csv);
            },
            scope: this
        });
        return deferred;
    },
    
    _getCSVFromRecord: function(record, grid, store) {
        //console.log('record:', record);
        
        var mock_meta_data = {
            align: "right",
            classes: [],
            cellIndex: 9,
            column: null,
            columnIndex: 9,
            innerCls: undefined,
            recordIndex: 5,
            rowIndex: 5,
            style: "",
            tdAttr: "",
            tdCls: "x-grid-cell x-grid-td x-grid-cell-headerId-gridcolumn-1029 x-grid-cell-last x-unselectable",
            unselectableAttr: "unselectable='on'"
        };
        
        var node_values = [];
        var columns = grid.columns;
        
        Ext.Array.each(columns, function (column) {
            if (column.xtype == 'rallyrowactioncolumn'  || column.xtype == 'tsrowactioncolumn') {
                return;
            }
            
            if ( column.hidden ) {
                return;
            }
            
            if (column.dataIndex) {
                var column_name = column.dataIndex;
                
                var display_value = record.get(column_name);

                if (!column._csvIgnoreRender && ( column.renderer || column.exportRenderer) ) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    }
                }
                node_values.push(display_value);
            } else {
                var display_value = null;
                if (!column._csvIgnoreRender && column.renderer) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    }
                    node_values.push(display_value);
                }
            }
        }, this);
        
        var csv_string = "";
        Ext.Array.each(node_values, function(node_value,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node_value) ) {
                csv_string = csv_string + node_value;
            } else {
                csv_string = csv_string + '"' + node_value + '"';
            }

        });
        
        return csv_string;
    }

});
(function() {

    'use strict';

    var idCounter = 0,
        wrap = Highcharts.wrap,
        each = Highcharts.each;

    /**
     * Exposed method to add a pattern to the renderer.
     */
    Highcharts.SVGRenderer.prototype.addPattern = function (id, options) {
        var pattern,
            path,
            w = options.width || 10,
            h = options.height || 10,
            ren = this;

        /**
         * Add a rectangle for solid color
         */
        function rect (fill) {
            ren.rect(0, 0, w, h)
                .attr({
                    fill: fill
                })
                .add(pattern);
        }

        if (!id) {
            id = 'highcharts-pattern-' + idCounter;
            idCounter += 1;
        }

        pattern = this.createElement('pattern').attr({
            id: id,
            patternUnits: 'userSpaceOnUse',
            width: options.width || 10,
            height: options.height || 10
        }).add(this.defs);

        // Get id
        pattern.id = pattern.element.id;

        // Use an SVG path for the pattern
        if (options.path) {
            path = options.path;

            // The background
            if (path.fill) {
                rect(path.fill);
            }

            // The pattern
            this.createElement('path').attr({
                'd': path.d || path,
                'stroke': path.stroke || options.color || '#343434',
                'stroke-width': path.strokeWidth || 2
            }).add(pattern);
            pattern.color = options.color;

        // Image pattern
        } else if (options.image) {

            this.image(options.image, 0, 0, options.width, options.height).add(pattern);

        // A solid color
        } else if (options.color) {

            rect(options.color);

        }

        if (options.opacity !== undefined) {
            each(pattern.element.children, function (child) {
                child.setAttribute('opacity', options.opacity);
            });
        }

        return pattern;
    };

    if (Highcharts.VMLElement) {

        Highcharts.VMLRenderer.prototype.addPattern = function (id, options) {

            var patterns;
            if (!id) {
                id = 'highcharts-pattern-' + idCounter;
                idCounter += 1;
            }
            patterns = this.patterns || {};
            patterns[id] = options;
            this.patterns = patterns;
        };

        Highcharts.wrap(Highcharts.VMLRenderer.prototype.Element.prototype, 'fillSetter', function (proceed, color, prop, elem) {
            if (typeof color === 'string' && color.substring(0, 5) === 'url(#') {
                var id = color.substring(5, color.length - 1),
                    pattern = this.renderer.patterns[id],
                    markup;

                if (pattern.image) {
                    // Remove Previous fills                    
                    if (elem.getElementsByTagName('fill').length) {
                        elem.removeChild(elem.getElementsByTagName('fill')[0]);
                    }

                    markup = this.renderer.prepVML(['<', prop, ' type="tile" src="', pattern.image, '" />']);
                    elem.appendChild(document.createElement(markup));

                    // Work around display bug on updating attached nodes
                    if (elem.parentNode.nodeType === 1) {
                        elem.outerHTML = elem.outerHTML;
                    }

                } else if (pattern.color) {
                    proceed.call(this, pattern.color, prop, elem);
                } else {
                    proceed.call(this, '#A0A0A0', prop, elem);
                }
            } else {
                proceed.call(this, color, prop, elem);
            }
        });
    }

    /**
     * Add the predefined patterns
     */
    function addPredefinedPatterns(renderer) {
        var colors = Highcharts.getOptions().colors;

        each([
            'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11',
            'M 0 10 L 10 0 M -1 1 L 1 -1 M 9 11 L 11 9',
            'M 3 0 L 3 10 M 8 0 L 8 10',
            'M 0 3 L 10 3 M 0 8 L 10 8',
            'M 0 3 L 5 3 L 5 0 M 5 10 L 5 7 L 10 7',
            'M 3 3 L 8 3 L 8 8 L 3 8 Z',
            'M 5 5 m -4 0 a 4 4 0 1 1 8 0 a 4 4 0 1 1 -8 0',
            'M 10 3 L 5 3 L 5 0 M 5 10 L 5 7 L 0 7',
            'M 2 5 L 5 2 L 8 5 L 5 8 Z',
            'M 0 0 L 5 10 L 10 0'
        ], function (pattern, i) {
            renderer.addPattern('highcharts-default-pattern-' + i, {
                path: pattern,
                color: colors[i]
            });
        });
        
        var patterns = {
            'diagonal-down': {path: 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', color: 'black' },
            'diagonal-up':   {path: 'M 0 10 L 10 0 M -1 1 L 1 -1 M 9 11 L 11 9', color: 'black' },
            'vertical':      {path: 'M 3 0 L 3 10 M 8 0 L 8 10', color: 'black' },
            'horizontal':    {path: 'M 0 3 L 10 3 M 0 8 L 10 8', color: 'black' },
            'circles':       {path: 'M 5 5 m -4 0 a 4 4 0 1 1 8 0 a 4 4 0 1 1 -8 0', color: 'white' },
            'squares':       {path: 'M 3 3 L 8 3 L 8 8 L 3 8 Z', color: 'black' },
            'diamonds':      {path: 'M 0 0 L 5 10 L 10 0', color: 'black' }

        };
        
        Ext.Object.each(patterns, function(name,config) { 
            renderer.addPattern(name, config);
        });
    }

    // Add patterns to the defs element
    wrap(Highcharts.Chart.prototype, 'getContainer', function (proceed) {
        proceed.apply(this);

        var chart = this,
            renderer = chart.renderer,
            options = chart.options,
            patterns = options.defs && options.defs.patterns;

        // First add default patterns
        addPredefinedPatterns(renderer);

        // Add user defined patterns
        if (patterns) {
            each(patterns, function (pattern) {
                renderer.addPattern(pattern.id, pattern);
            });
        }

    });

}());
Ext.define('CA.technicalservices.ProjectTreePickerDialog', {
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.projecttreepickerdialog',

    minWidth: 400,
    width: 400,
    minHeight: 300,
    height: 300,
    
    layout: 'fit',
    closable: true,
    draggable: true,

    config: {
        /**
         * @cfg {String}
         * Title to give to the dialog
         */
        title: 'Choose Project(s)',
        /**
         * 
         * @cfg {String} introText
         * 
         *  Informational text to include on the dialog.
         */
        introText: null,
        
        /**
         * @cfg {Boolean}
         * Allow multiple selection or not
         */
        multiple: true,
        
        /**
         * @cfg {Object}  || Rally.data.wsapi.Filter[]  
         * Name of top project to start building the tree down through the hierarchy.
         */
        root_filters: [{
                property: 'Parent',
                value: ""
        }],

        /**
         * @cfg {Object}
         * An {Ext.data.Store} config object used when building the grid
         * Handy when you need to limit the selection with store filters
         */
        storeConfig: {
            context: {
                project: null
            },
            sorters: [
                {
                    property: 'Name',
                    direction: 'DESC'
                }
            ]
        },

        /**
         * @cfg {Ext.grid.Column}
         * List of columns that will be used in the chooser
         */
        columns: [
            'Name'
        ],

        /**
         * @cfg {String}
         * Text to be displayed on the button when selection is complete
         */
        selectionButtonText: 'Done',

        /**
         * @cfg {Object}
         * The grid configuration to be used when creative the grid of items in the dialog
         */
        gridConfig: {},

        /**
         * @cfg {Object[] || Rally.data.wsapi.Model[]}  initialSelectedRecords
         * The records to select when the chooser loads.  Provide either configuration objects
         * (with at lease { _ref: xxx } defined) or models
         */
        initialSelectedRecords: undefined,

        /**
         * @cfg showRadioButtons {Boolean}
         */
        showRadioButtons: true,
        
        /**
         * @cfg showSearchBox {Boolean}
         * 
         * [ Experimental.  Search box might not work ]
         */
        showSearchBox: false
    },

    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },

    selectionCache: [],

    initComponent: function() {
        this.callParent(arguments);

        this.addEvents(
            /**
             * @event artifactchosen
             * Fires when user clicks done after choosing an artifact
             * @param {Rally.ui.dialog.ArtifactChooserDialog} source the dialog
             * @param {Rally.data.wsapi.Model}| {Rally.data.wsapi.Model[]} selection selected record or an array of selected records if multiple is true
             */
            'itemschosen'
        );

        this.addCls(['chooserDialog', 'chooser-dialog']);
    },

    destroy: function() {
        //      this._destroyTooltip();
        this.callParent(arguments);
    },

    beforeRender: function() {
        this.callParent(arguments);

        this.addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    itemId: 'doneButton',
                    text: this.selectionButtonText,
                    cls: 'primary rly-small',
                    scope: this,
                    disabled: true,
                    userAction: 'clicked done in dialog',
                    handler: function() {
                        this.fireEvent('itemschosen', this.getSelectedRecords());
                        this.close();
                    }
                },
                {
                    xtype: 'rallybutton',
                    text: 'Cancel',
                    cls: 'secondary rly-small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });

        if (this.introText) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                html: this.introText
            });
        }

        if ( this.showSearchBox ) {
            this.addDocked({
                xtype: 'toolbar',
                itemId: 'searchBar',
                dock: 'top',
                border: false,
                padding: '0 0 10px 0',
                items: this.getSearchBarItems()
            });
        }

        this.buildGrid();

        this.selectionCache = this.getInitialSelectedRecords() || [];
    },

    /**
     * Get the records currently selected in the dialog
     * {Rally.data.Model}|{Rally.data.Model[]}
     */
    getSelectedRecords: function() {
        return this.multiple ? this.selectionCache : this.selectionCache[0];
    },

    getSearchBarItems: function() {
        
        return [
            {
                xtype: 'triggerfield',
                cls: 'rui-triggerfield chooser-search-terms',
                emptyText: 'Search Keyword or ID',
                enableKeyEvents: true,
                flex: 1,
                itemId: 'searchTerms',
                listeners: {
                    keyup: function (textField, event) {
                        if (event.getKey() === Ext.EventObject.ENTER) {
                            this._search();
                        }
                    },
                    afterrender: function (field) {
                        field.focus();
                    },
                    scope: this
                },
                triggerBaseCls: 'icon-search chooser-search-icon'
            }
        ];
    },
    getStoreFilters: function() {
        return [];
    },

    buildGrid: function() {
        if (this.grid) {
            this.grid.destroy();
        }
        var me = this;

        this.setLoading('Fetching Project Tree...');
        Ext.create('Rally.data.wsapi.ProjectTreeStoreBuilder').build({
            models: ['project'],
            autoLoad: true,
            enableHierarchy: true,
            filters: me.root_filters,
            sorters: [{property:'Name'}]
        }).then({
            scope: this,
            success: function(store) {

                var mode = this.multiple ? 'MULTI' : 'SINGLE';

                var checkbox_model = Ext.create('Rally.ui.selection.CheckboxModel', {
                    mode: mode,
                    enableKeyNav: false,
                    allowDeselect: true
                });

                this.grid = this.add({
                    xtype: 'rallytreegrid',
                    treeColumnDataIndex: 'Name',
                    treeColumnHeader: 'Name',
                    viewConfig: {
                        cls: 'grid-view-bulk-edit'
                    },
                    enableRanking: false,
                    enableEditing: false,
                    enableBulkEdit: false,
                    shouldShowRowActionsColumn: false,

                    selModel: checkbox_model,
                    _defaultTreeColumnRenderer: function (value, metaData, record, rowIdx, colIdx, store) {
                        store = store.treeStore || store;
                        return Rally.ui.renderer.RendererFactory.getRenderTemplate(store.model.getField('Name')).apply(record.data);
                    },
                    columnCfgs: [],
                    store: store
                });

                this.mon(this.grid, {
                    beforeselect: this._onGridSelect,
                    beforedeselect: this._onGridDeselect,
                    load: this._onGridLoad,
                    scope: this
                });
                this.add(this.grid);
                this._onGridReady();
            }
        }).always(function() { me.setLoading(false);} );
    },

    _enableDoneButton: function() {
        this.down('#doneButton').setDisabled(this.selectionCache.length ? false : true);
    },

    _findRecordInSelectionCache: function(record){
        var me = this;
        return _.findIndex(this.selectionCache, function(cachedRecord) {
            return me._specialGet(cachedRecord,'_ref') === me._specialGet(record,'_ref');
        });
    },

    _onGridSelect: function(selectionModel, record) {
        var index = this._findRecordInSelectionCache(record);

        if (index === -1) {
            if (!this.multiple) {
                this.selectionCache = [];
            }
            this.selectionCache.push(record);
        }

        this._enableDoneButton();
    },

    _onGridDeselect: function(selectionModel, record) {
        var index = this._findRecordInSelectionCache(record);
        if (index !== -1) {
            this.selectionCache.splice(index, 1);
        }
        this._enableDoneButton();
    },

    _onGridReady: function() {
        if (!this.grid.rendered) {
            this.mon(this.grid, 'afterrender', this._onGridReady, this, {single: true});
            return;
        }

        if (this.grid.getStore().isLoading()) {
            this.mon(this.grid, 'load', this._onGridReady, this, {single: true});
            return;
        }

        this._onGridLoad();
        this.center();
    },
    
    _specialGet: function(item, field) {
        if ( Ext.isEmpty(item) ) { 
            return null;
        }
        
        if ( Ext.isFunction(item.get) ) { 
            return item.get(field);
        }
        
        return item[field];
    },
    
    _onGridLoad: function() {
        var store = this.grid.store;
        var records = [];
        Ext.Array.each(this.selectionCache, function(record) {
            var ref = this._specialGet(record,'_ref');
            var foundNode = store.getRootNode().findChild('_ref',ref,true);

            if (foundNode) {
                records.push(foundNode);
            }
        },this);
        if (records.length) {
            this.grid.getSelectionModel().select(records);
        }
    },
    _search: function() {
        var terms = this._getSearchTerms();
        var store = this.grid.getStore();
        //Filter functions call store load so we don't need to refresh the selections becuaes the
        //onGridLoad function will
        if (terms) {
            store.filter([
                Ext.create('Rally.data.wsapi.Filter',{
                    property: 'Name',
                    operator: 'contains',
                    value: terms
                })
            ]);
        } else {
            store.clearFilter();
        }

    },
    _getSearchTerms: function() {
        var textBox = this.down('#searchTerms');
        return textBox && textBox.getValue();
    }
});

Ext.override(Rally.data.wsapi.ParentChildMapper, {
    constructor: function() {
        this.parentChildTypeMap = {
            project: [{
                typePath: 'project', collectionName: 'Children', parentField: 'Parent'
            }],
            hierarchicalrequirement: [
                {typePath: 'defect', collectionName: 'Defects', parentField: 'Requirement'},
                {typePath: 'task', collectionName: 'Tasks', parentField: 'WorkProduct'},
                {typePath: 'testcase', collectionName: 'TestCases', parentField: 'WorkProduct'},
                {typePath: 'hierarchicalrequirement', collectionName: 'Children', parentField: 'Parent'}
            ],
            defect: [
                {typePath: 'task', collectionName: 'Tasks', parentField: 'WorkProduct'},
                {typePath: 'testcase', collectionName: 'TestCases', parentField: 'WorkProduct'}
            ],
            defectsuite: [
                {typePath: 'defect', collectionName: 'Defects', parentField: 'DefectSuites'},
                {typePath: 'task', collectionName: 'Tasks', parentField: 'WorkProduct'},
                {typePath: 'testcase', collectionName: 'TestCases', parentField: 'WorkProduct'}
            ],
            testset: [
                {typePath: 'task', collectionName: 'Tasks', parentField: 'WorkProduct'},
                {typePath: 'testcase', collectionName: 'TestCases', parentField: 'TestSets'}
            ]
        };
    }
});


Ext.define('Rally.data.wsapi.ProjectTreeStore', {

    extend: 'Rally.data.wsapi.TreeStore',
    alias: 'store.rallyprojectwsapitreestore',
    
    /**
     * The type definition typePaths to render as root items (required)
     * @cfg {String[]} parentTypes
     */
    parentTypes: ['project'],
    
    /**
     * @property
     * @private
     */
    childLevelSorters: [{
        property: 'Name',
        direction: 'ASC'
    }],
        
    getParentFieldNamesByChildType: function(childType, parentType) {
        return ['Parent'];
    },

    _getChildNodeFilters: function(node) {
        var parentType = node.self.typePath,
            childTypes = this._getChildTypePaths([parentType]),
            parentFieldNames = this._getParentFieldNames(childTypes, parentType);

        var filter = [];
        if (parentFieldNames.length) {
            filter =  [
                Rally.data.wsapi.Filter.or(_.map(parentFieldNames, function(parentFieldName) {
                    return {
                        property: parentFieldName,
                        operator: '=',
                        value: node.get('_ref')
                    };
                }))
            ];
        }

        return filter;
    },

    filter: function(filters) {
        console.log('--');
        this.fireEvent('beforefilter', this);
        //We need to clear the filters to remove the Parent filter
        this.filters.clear();
        this.filters.addAll(filters);
        this._resetCurrentPage();
        this.load();
    },
    
    load: function(options) {
        this.recordLoadBegin({description: 'tree store load', component: this.requester});

        this._hasErrors = false;

        this.on('beforeload', function(store, operation) {
            delete operation.id;
        }, this, { single: true });

        options = this._configureLoad(options);
        options.originalCallback = options.callback;
        var deferred = Ext.create('Deft.Deferred'),
            me = this;

        options.callback = function (records, operation, success) {
            me.dataLoaded = true;

            if (me._pageIsEmpty(operation)) {
                me._reloadEmptyPage(options).then({
                    success: function (records) {
                        // this gives a maximum callstack exceeded error.  don't know why
                        //me._resolveLoadingRecords(deferred, records, options, operation, success);
                    },
                    failure: function() {
                        me._rejectLoadingRecord(deferred, options, operation);
                    }
                });
            } else {
                //me._resolveLoadingRecords(deferred, records, options, operation, success);
            }
        };

        if (this._isViewReady()) {
            this._beforeInitialLoad(options);
        }

        this.callParent([options]);

        return deferred.promise;
    },

    clearFilter: function(suppressEvent) {
        this._resetCurrentPage();
        this.filters.clear();
        //We need to add the parent filter back in
        this.filters.addAll(Ext.create('Rally.data.wsapi.Filter',{
            property: 'Parent',
            value: ''
        }));

        if (!suppressEvent) {
            this.load();
        }
    }
});

Ext.define('Rally.data.wsapi.ProjectTreeStoreBuilder', {
    extend: 'Rally.data.wsapi.TreeStoreBuilder',

    build: function(config) {
        config = _.clone(config || {});
        config.storeType = 'Rally.data.wsapi.ProjectTreeStore';

        return this.loadModels(config).then({
            success: function(models) {
                models = _.values(models);
                return this._buildStoreWithModels(models, config);
            },
            scope: this
        });
    },

    _useCompositeArtifacts: function (models, config) {
        return false;
    }
});
Ext.define('CA.technicalservices.WorkspaceSettingsField',{
    extend: 'Ext.form.field.Base',
    alias: 'widget.tsworkspacesettingsfield',
    fieldSubTpl: '<div id="{id}" class="settings-grid"></div>',
    width: '100%',
    cls: 'column-settings',

    height: 150,
    width: 500,
    
    store: undefined,
    labelAlign: 'top',
    
    onDestroy: function() {
        if (this._grid) {
            this._grid.destroy();
            delete this._grid;
        }
        this.callParent(arguments);
    },
    
    initComponent: function(){
        this.callParent();

        var me = this;
        this.addEvents('ready');

        this.setLoading("Fetching Information...");
        TSUtilities.getAllWorkspaces().then({
            scope: this,
            success: me._buildWorkspaceGrid,
            failure: function(msg) {
                Ext.Msg.alert('Problem Loading Workspaces', msg);
            }
        });
    },

    onRender: function() {
        this.callParent(arguments);
        this.setLoading('Loading...');
    },
        
    _buildWorkspaceGrid: function(workspaces){
        this.setLoading(false);
        
        var container = Ext.create('Ext.container.Container',{
            layout: { type:'hbox' },
            renderTo: this.inputEl,
            minWidth: 50
        });
        
        var decodedValue = [];
        
        if (this.initialConfig && this.initialConfig.value && !_.isEmpty(this.initialConfig.value)){
            if (!Ext.isObject(this.initialConfig.value)){
                decodedValue = Ext.JSON.decode(this.initialConfig.value);
            } else {
                decodedValue = this.initialConfig.value;
            }
        }
        
        console.log('decodedValue', decodedValue);
        
        var data = [],
            empty_text = "No selections";
            
        if ( Ext.isArray(decodedValue) ) {
            
            data = decodedValue;
            
        } 
        
        var custom_store = Ext.create('Ext.data.Store', {
            fields: ['workspaceName','workspaceRef','workspaceObjectID','workspaceProjectName','workspaceProjectRef','workspaceProjectObjectID'],
            data: data
        });
        
        
        var gridWidth = Math.min(this.width-125, 500);
        this._grid = container.add(  {
            xtype:'rallygrid',
            autoWidth: true,
            columnCfgs: this._getColumnCfgs(workspaces),
            showRowActionsColumn:false,
            showPagingToolbar: false,
            store: custom_store,
            width: gridWidth,
            emptyText: empty_text,
            editingConfig: {
                publishMessages: false
            }
        });
        
        container.add({
            xtype: 'rallybutton',
            text: 'Add Row',
            margin: '0 0 0 10',
            listeners: {
                scope: this,
                click: function(){
                    var store = this._grid.getStore();
                    Ext.create('CA.technicalservices.WorkspaceProgramPickerDialog',{
                        workspaces: workspaces,
                        listeners: {
                            scope: this,
                            select: function(dialog,value) {
                                if ( Ext.isEmpty(value) ) { return; }
                              
                                var workspace = value.workspace;
                                var project = value.project;
                                
                                store.add({
                                    workspaceName: workspace.get('Name'),
                                    workspaceRef: workspace.get('_ref'),
                                    workspaceObjectID: workspace.get('ObjectID'),
                                    workspaceProjectName: project.get('Name'),
                                    workspaceProjectObjectID: project.get('ObjectID'),
                                    workspaceProjectRef: project.get('_ref')
                                });                                
                            }
                        }
                    });

                    
                }
            }
        });

       this.fireEvent('ready', true);
    },
    _removeProject: function(){
        this.grid.getStore().remove(this.record);
    },
    
    _getColumnCfgs: function(workspaces) {
        var me = this;

        var columns = [{
            xtype: 'rallyrowactioncolumn',
            scope: this,
            rowActionsFn: function(record){
                return  [
                    {text: 'Remove', record: record, handler: me._removeProject, grid: me._grid }
                ];
            }
        },
        {
            text: 'Workspace',
            dataIndex: 'workspaceName',
            flex: 1,
            editor: null
        },
        {
            text: 'Program Parent',
            dataIndex: 'workspaceProjectName',
            flex: 1,
            editor: false
        }];
        return columns;
    },
    /**
     * When a form asks for the data this field represents,
     * give it the name of this field and the ref of the selected project (or an empty string).
     * Used when persisting the value of this field.
     * @return {Object}
     */
    getSubmitData: function() {
        var data = {};
        data[this.name] = Ext.JSON.encode(this._buildSettingValue());
        console.log('getSubmitData', data);
        return data;
    },
    
    _buildSettingValue: function() {
        var mappings = [];
        var store = this._grid.getStore();

        store.each(function(record) {
            if (record.get('workspaceRef') && record.get('workspaceProjectRef')) {
                mappings.push({
                    workspaceName: record.get('workspaceName'),
                    workspaceRef: record.get('workspaceRef'),
                    workspaceObjectID: record.get('workspaceObjectID'),
                    workspaceProjectName: record.get('workspaceProjectName'),
                    workspaceProjectObjectID: record.get('workspaceProjectObjectID'),
                    workspaceProjectRef: record.get('workspaceProjectRef')
                });
            }
        }, this);
        
        return mappings;
    },

    getErrors: function() {
        var errors = [];
        //Add validation here
        return errors;
    },
    setValue: function(value) {
        console.log('setValue', value);
        this.callParent(arguments);
        this._value = value;
    }
});
Ext.define('CA.technicalservices.WorkspaceProgramPickerDialog', {
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.workspaceprogrampickerdialog',

    config: {
        autoShow: true,
        
        width: 200,
        height: 200,
        
        closable: false,
        draggable: true,
        /**
         * @cfg {String}
         * Title to give to the dialog
         */
        title: 'Choose Workspace and Program',

        /**
         * @cfg {String}
         * Text to be displayed on the button when selection is complete
         */
        selectionButtonText: 'Done',
        
        /**
         * @cfg {Rally.data.wsapi.Model[]} workspaces
         * 
         * The workspaces to allow for choosing.
         */
        workspaces: []
    },

    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },

    selectionCache: [],

    initComponent: function() {
        this.callParent(arguments);

        this.addEvents(
            /**
             * @event select
             * Fires when user clicks the done button after choosing the workspace and project
             * @param {CA.technicalservices.ProjectTreePickerDialog} source the dialog
             * @param {Object} the workspace and project chosen.  Looks like:
             *   { workspace: {Rally.data.wsapi.Model}, project: {Rally.data.wsapi.Model} }
             */
            'select'
        );
                
        this.workspaces_by_ref = {};
        Ext.Array.each(this.workspaces, function(workspace){
            this.workspaces_by_ref[workspace.get('_ref')] = workspace;
        },this);
        
        this.addCls(['chooserDialog', 'chooser-dialog']);
    },

    destroy: function() {
        //      this._destroyTooltip();
        this.callParent(arguments);
    },

    beforeRender: function() {
        this.callParent(arguments);

        this.addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    itemId: 'doneButton',
                    text: this.selectionButtonText,
                    cls: 'primary rly-small',
                    scope: this,
                    disabled: true,
                    userAction: 'clicked done in dialog',
                    handler: function() {
                        this.fireEvent('select', this, this.getSelectedValues());
                        this.close();
                    }
                },
                {
                    xtype: 'rallybutton',
                    text: 'Cancel',
                    cls: 'secondary rly-small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });

        if (this.introText) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                html: this.introText
            });
        }
        
        var container = this.add({
            xtype: 'container',
            itemId: 'selector_box'
        });

        this.addSelectors(container);
    },

    addSelectors: function(container) {
        container.removeAll();
        var ws_store = Ext.create('Ext.data.Store',{
            fields: ['_ref','Name'],
            data: Ext.Array.map(this.workspaces, function(workspace) { return workspace.getData(); })
        });
        
        this.workspace_selector = container.add({
            xtype: 'combobox',
            store: ws_store,
            queryMode: 'local',
            displayField:'Name',
            valueField: '_ref',
            fieldLabel: 'Workspace',
            labelAlign: 'top',
            margin: 5,
            
            listeners: {
                scope: this,
                change: function(wb){
                    this.project_selector && this.project_selector.destroy();
                    this._disableDoneButton();
                    
                    this.project_selector = container.add({
                        xtype: 'rallyprojectpicker',
                        showMostRecentlyUsedProjects: false,
                        workspace: wb.getValue(),
                        fieldLabel: 'Program',
                        labelAlign: 'top',
                        margin: 5,
                        listeners: {
                            scope: this,
                            change: function(pb) {
                                if ( pb.getValue() ) {
                                    this._enableDoneButton();
                                } else {
                                    this._disableDoneButton();
                                }
                            }
                        }
                    });
                }
            }
        });
                
    },

    _enableDoneButton: function() {
        this.down('#doneButton').setDisabled(false);
    },

    _disableDoneButton: function() {
        this.down('#doneButton').setDisabled(true);
    },
    
    getSelectedValues: function() {

        if ( Ext.isEmpty(this.project_selector) || Ext.isEmpty(this.workspace_selector) ) {
            return null;
        }
        
        var project = this.project_selector && this.project_selector.getSelectedRecord();
        var workspace_ref = this.workspace_selector && this.workspace_selector.getValue();

        var workspace = this.workspaces_by_ref[workspace_ref];
        return {
            workspace:workspace,
            project: project
        };
    }
});
Ext.define("CA.apps.charts.Colors", {
    
    singleton: true, 
    
    // RGB values obtained from here: http://ux-blog.rallydev.com/?cat=23
    grey4: "#C0C0C0",  // $grey4
    orange: "#FF8200",  // $orange
    gold: "#F6A900",  // $gold
    yellow: "#FAD200",  // $yellow
    lime: "#8DC63F",  // $lime
    green_dk: "#1E7C00",  // $green_dk
    blue_link: "#337EC6",  // $blue_link
    blue: "#005EB8",  // $blue
    blue_dark: '#00386e', 
    blue_light: '#b2cee9',
    purple : "#7832A5",  // $purple,
    pink : "#DA1884",   // $pink,
    grey7 : "#666",
    red : '#FF2A00',
    green : '#00FF2A',

    cumulativeFlowColors : function() {
        return [
            this.grey4, this.orange, this.gold, this.yellow, this.lime, this.green_dk, this.blue_link, this.blue, this.purple, this.pink
        ];
    },

    burnLineColor : function (){ return this.blue; },
    burnColumnColor : function() { return this.lime; },
    
    getConsistentBarColors: function() { 
    		return [
		    		this.grey4, 
		    		this.blue_light, 
		    		this.blue, 
		    		this.blue_dark, 
		    		this.grey7, 
		    		this.lime, 
		    		this.green, 
		    		this.green_dk, 
		    		this.orange, 
		    		this.purple 
  	  	]; 
    },
    
    getConsistentBarPatterns: function() { 
        return [
            'url(#circles)',
            'url(#diagonal-down)',
            'url(#diagonal-up)',
            'url(#vertical)',
            'url(#horizontal)',
            'url(#squares)',
            'url(#diamonds)',
            'url(#highcharts-default-pattern-6)',
            'url(#highcharts-default-pattern-7)'
        ];
    }
});

Ext.override(Rally.ui.chart.Chart,{

    // override to allow for data to be pushed in more complicated objects
    _isData: function(point) {
        if ( point > 0 ) { return true; }
        if ( point && point.y && point.y > 0 ) { return true; }
        return false;
    }
    
});

Ext.define('CA.techservices.container.ChartWithDescription',{
    extend: 'Ext.container.Container',
    alias:  'widget.tschartwithdescription',
    
    layout: 'hbox',
    
    items: [
        {xtype:'container', itemId:'chart_box', flex: 1},
        {xtype:'container', itemId:'description_box'}
    ],
    
    setDescription: function(description) {
        var box = this.down('#description_box');
        box.removeAll();
        
        if ( Ext.isEmpty(description) ) {
            return;
        }
        box.add({
            xtype:'panel',
            ui: 'info-box',
            title: '<span class="icon-info-circle"> </span>',
            collapsible: true,
            collapsed: true,
            collapseDirection: 'right',
            headerPosition: 'left',
            width: 375,
            height: 375,
            margin: 5,
            overflowY: 'auto',
            html: description,
            listeners:{
                collapse: function(){
                    this.up().previousSibling().focus();
                },
                expand: function(){
                    this.up().previousSibling().focus();
                }
            }
            
        });
    },
    
    removeChart: function() {
        var box = this.down('#chart_box');
        box.removeAll();
    },
    
    setChart: function(config) {
        var box = this.down('#chart_box');
        
        this.removeChart();

        var chart_config = Ext.apply({
            xtype:'rallychart',
            loadMask: false,
            chartColors: CA.apps.charts.Colors.getConsistentBarColors()
        }, config);
        
        box.add(chart_config);
    }
});
Ext.define("CA.techservices.app.ChartApp", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    padding: 5,
    
    description: '<em>Deprecated.  Make an array in this.descriptions instead.</em>',
    
    descriptions: [],
    
    items: [
        {xtype:'container', width:'98%', items:[
            {xtype:'container',itemId:'banner_box', layout:'hbox', padding: 10},
            {xtype:'container',itemId:'main_display_box'},
            {xtype:'container',itemId:'additional_display_box'}
        ]}
    ],

    config: {
        defaultSettings: {
            showPatterns: false
        }
    },
    
    launch: function() {
        
        var descriptions = [this.description];
        
        if ( !Ext.isEmpty(this.descriptions) && this.descriptions.length > 0 ) {
            descriptions = this.descriptions;
        }
                
        Ext.Array.each(descriptions, function(description,index){
            console.log("add box, index:", index);
            this._addChartBox(index);
            this.applyDescription(description,index);
            this._addGridBox(index);
        },this);
    }, 
    
    _addChartBox: function(index) {
        return this.down("#main_display_box").add({
            xtype:'tschartwithdescription', 
            itemId: 'main_chart_' + index
        });
    },
    
    _addGridBox: function(index) {
        return this.down("#main_display_box").add({
            xtype:'tsgridbox', 
            itemId: 'main_grid_' + index
        });
    },

    /*
     * DEPRECATED. Use applyDescription
     */
    setDescription: function() {
        this.applyDescription(this.description,0);
    },
    
    applyDescription: function(description,index) {
        this.getChartBox(index).setDescription(description);
    },
    
    clearBanner: function() {
        this.down('#banner_box').removeAll();
    },
    
    addToBanner: function(config) {
        return this.down('#banner_box').add(config);
    },
    
    
    /*
     * DEPRECATED. Use getGridBox, setGrid instead.
     */
    clearAdditionalDisplay: function() {
        this.down('#additional_display_box').removeAll();
    },
    
    addToAdditionalDisplay: function(config) {
        return this.down('#additional_display_box').add(config);
    },
    
    getChartBox: function(index) {
        if ( Ext.isEmpty( index ) ) { index = 0; }
        return this.down('#main_chart_' + index);
    },
    
    clearChartBox: function(index) {
        if ( Ext.isEmpty( index ) ) { index = 0; }
        this.down('#main_chart_' + index) && this.down('#main_chart_' + index).removeChart();
    },
    
    setChart: function(config,index) {
        this.getChartBox(index).setChart(config);
    },
    

    getGridBox: function(index) {
        if ( Ext.isEmpty( index ) ) { index = 0; }
        return this.down('#main_grid_' + index);
    },
    
    setGrid: function(config,index) {
        this.getGridBox(index).setGrid(config);
    },

    getDrillDownColumns: function(title) {
        return [
            {
                dataIndex : 'FormattedID',
                text: "id"
            },
            {
                dataIndex : 'Name',
                text: "Name",
                flex: 1
            },
            {
                dataIndex: 'ScheduleState',
                text: 'Schedule State'
            },
            {
                dataIndex: 'PlanEstimate',
                text: 'Plan Estimate'
            }
        ];
    },
    
    showDrillDown: function(stories, title) {
        var me = this;

        var store = Ext.create('Rally.data.custom.Store', {
            data: stories,
            pageSize: 2000
        });
        
        Ext.create('Rally.ui.dialog.Dialog', {
            id        : 'detailPopup',
            title     : title,
            width     : Ext.getBody().getWidth() - 50,
            height    : Ext.getBody().getHeight() - 50,
            closable  : true,
            layout    : 'border',
            items     : [
            {
                xtype                : 'rallygrid',
                region               : 'center',
                layout               : 'fit',
                sortableColumns      : true,
                showRowActionsColumn : false,
                showPagingToolbar    : false,
                columnCfgs           : this.getDrillDownColumns(title),
                store : store
            }]
        }).show();
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    getSettingsFields: function() {
        return [
        { 
            name: 'showPatterns',
                xtype: 'rallycheckboxfield',
                boxLabelAlign: 'after',
                fieldLabel: '',
                margin: '0 0 25 200',
                boxLabel: 'Show Patterns<br/><span style="color:#999999;"><i>Tick to use patterns in the chart instead of color.</i></span>'
        }
        ];
    }
    
});

Ext.define("CA.techservices.app.GridApp", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    padding: 5,
    
    description: '<em>Deprecated.  Make an array in this.descriptions instead.</em>',
    
    descriptions: [],
    
    items: [
        {xtype:'container', width:'98%', items:[
            {xtype:'container',itemId:'banner_box', layout:'hbox', padding: 10},
            {xtype:'container',itemId:'main_display_box'},
            {xtype:'container',itemId:'additional_display_box'}
        ]}
    ],

    config: {
        defaultSettings: {
            showPatterns: false
        }
    },
    
    launch: function() {
        
        var descriptions = [this.description];
        
        if ( !Ext.isEmpty(this.descriptions) && this.descriptions.length > 0 ) {
            descriptions = this.descriptions;
        }
                
        Ext.Array.each(descriptions, function(description,index){
            this._addGridBox(index);
            this.applyDescription(description,index);
        },this);
    }, 
    
    _addGridBox: function(index) {
        return this.down("#main_display_box").add({
            xtype:'tsgridwithdescription', 
            itemId: 'main_grid_' + index
        });
    },
    
    /*
     * DEPRECATED. Use applyDescription
     */
    setDescription: function() {
        this.applyDescription(this.description,0);
    },
    
    applyDescription: function(description,index) {
        this.getGridBox(index).setDescription(description);
    },
    
    clearBanner: function() {
        this.down('#banner_box').removeAll();
    },
    
    addToBanner: function(config) {
        return this.down('#banner_box').add(config);
    },
    
    
    /*
     * DEPRECATED. Use getGridBox, setGrid instead.
     */
    clearAdditionalDisplay: function() {
        this.down('#additional_display_box').removeAll();
    },
    
    addToAdditionalDisplay: function(config) {
        return this.down('#additional_display_box').add(config);
    },
    

    getGridBox: function(index) {
        if ( Ext.isEmpty( index ) ) { index = 0; }
        return this.down('#main_grid_' + index);
    },
    
    setGrid: function(config,index) {
        this.getGridBox(index).setGrid(config);
    },

    getDrillDownColumns: function(title) {
        return [
            {
                dataIndex : 'FormattedID',
                text: "id"
            },
            {
                dataIndex : 'Name',
                text: "Name",
                flex: 1
            },
            {
                dataIndex: 'ScheduleState',
                text: 'Schedule State'
            },
            {
                dataIndex: 'PlanEstimate',
                text: 'Plan Estimate'
            }
        ];
    },
    
    showDrillDown: function(stories, title) {
        var me = this;

        var store = Ext.create('Rally.data.custom.Store', {
            data: stories,
            pageSize: 2000
        });
        
        Ext.create('Rally.ui.dialog.Dialog', {
            id        : 'detailPopup',
            title     : title,
            width     : Ext.getBody().getWidth() - 50,
            height    : Ext.getBody().getHeight() - 50,
            closable  : true,
            layout    : 'border',
            items     : [
            {
                xtype                : 'rallygrid',
                region               : 'center',
                layout               : 'fit',
                sortableColumns      : true,
                showRowActionsColumn : false,
                showPagingToolbar    : false,
                columnCfgs           : this.getDrillDownColumns(title),
                store : store
            }]
        }).show();
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
      
});

Ext.define('CA.techservices.container.GridBox',{
    extend: 'Ext.container.Container',
    alias:  'widget.tsgridbox',
    
    items: [
        {xtype:'container', itemId:'grid_box'},
    ],
    
    setGrid: function(config) {
        var box = this.down('#grid_box');
        box.removeAll();
        
        box.add(config);
    }
});
Ext.define('CA.techservices.container.GridWithDescription',{
    extend: 'Ext.container.Container',
    alias:  'widget.tsgridwithdescription',
    
    layout: 'hbox',
    
    items: [
        {xtype:'container', itemId:'grid_box', flex: 1},
        {xtype:'container', itemId:'description_box'}
    ],
    
    setDescription: function(description) {
        var box = this.down('#description_box');
        box.removeAll();
        
        if ( Ext.isEmpty(description) ) {
            return;
        }
        box.add({
            xtype:'panel',
            ui: 'info-box',
            title: '<span class="icon-info-circle"> </span>',
            collapsible: true,
            collapsed: true,
            collapseDirection: 'right',
            headerPosition: 'left',
            width: 375,
            height: 375,
            margin: 5,
            overflowY: 'auto',
            html: description,
            listeners:{
                collapse: function(){
                    this.up().previousSibling().focus();
                },
                expand: function(){
                    this.up().previousSibling().focus();
                }
            }
            
        });
    },
    
    setGrid: function(config) {
        var box = this.down('#grid_box');
        box.removeAll();
        config.height = 375;
        box.add(config);
    }
});
Ext.define('CA.techservices.container.QuarterItemSelector', {
    extend : 'Ext.Container',
    alias : 'widget.quarteritemselector',
    layout : 'hbox',
    width : '100%',
    mixins : [
        'Rally.Messageable',
        'Ext.state.Stateful'
    ],
    stateful: true,
    stateEvents: ['change'],

    workspaces: [],

    buttonPushed: false,
    constructor : function(config){
        this.callParent(arguments);
    },

    initComponent : function(){
        this.callParent(arguments);

        var me = this;
        this.removeAll();
        
        
        var promises = Ext.Array.map(me.workspaces, function(workspace) {
            return function() { 
                return me._getPrograms( workspace ) 
            };
        });
        
        console.log('promises', promises);
        
        this.setLoading('loading program information');
        
        Deft.Chain.sequence(promises).then({
            scope: this,
            success: function(all_results) {
                console.log('all_results>>>>',all_results);
                var results = {};
                Ext.Array.each(all_results,function(res){Ext.Object.merge(results,res);});
                me.programs = results;
                me._addSelector();
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem gathering data', msg);
            }
        }).always(function() { me.setLoading(false); });

        // configured to allow others to ask what the current selection is,
        // in case they missed the initial message
        this.subscribe(this, 'requestQuarter', this._requestQuarter, this);

    },

    _getPrograms:function(workspace){
        var me = this;
        var deferred = Ext.create('Deft.Deferred');
        
        console.log("_getPrograms", workspace);
        
        var workspace_name = workspace.Name || workspace.workspaceName || workspace.get('_refObjectName');
        var workspace_ref  = workspace.workspaceRef || workspace._ref || workspace.get('_ref');
        var program_parent_oid = workspace.workspaceProjectObjectID;
        
        // programs are the projects that are at the bottom of the tree
        var parent_filters = Rally.data.wsapi.Filter.or([
            { property:'ObjectID', value: program_parent_oid },
            { property:'Parent.ObjectID', value: program_parent_oid },
            { property:'Parent.Parent.ObjectID', value: program_parent_oid },
            { property:'Parent.Parent.Parent.ObjectID', value: program_parent_oid },
            { property:'Parent.Parent.Parent.Parent.ObjectID', value: program_parent_oid },
            { property:'Parent.Parent.Parent.Parent.Parent.ObjectID', value: program_parent_oid },
            { property:'Parent.Parent.Parent.Parent.Parent.Parent.ObjectID', value: program_parent_oid }
        ]);
        
        var leaf_node_filters = Rally.data.wsapi.Filter.and([
            { property:'Children.ObjectID',value: "" }
        ]);
        
        var config = {
            model:'Project',
            filters: leaf_node_filters.and(parent_filters),
            enablePostGet: true,
            limit:Infinity,
            pageSize: 2000,
            fetch:['ObjectID','Project','Name','Workspace'],
            context: { 
                project: null,
                workspace: workspace_ref
            }
        };
        
        TSUtilities.loadWsapiRecords(config).then({
            success: function(projects) {
                console.log("Found projects:", projects);
                var epms_id_projects = {}
                Ext.Array.each(projects,function(project){
                    var project_oid = project.get('ObjectID');
                    
                    epms_id_projects[project_oid] = {
                        program: project.getData(),
                        projects: [],
                        workspace: workspace
                    };
                    
                });
                deferred.resolve(epms_id_projects);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
            
        });
//        TSUtilities.getPortfolioItemTypes(workspace).then({
//            success: function(types) {
//                if ( types.length < 2 ) {
//                    deferred.resolve({});
//                    //Ext.Msg.alert('',"Cannot find a record type for EPMS project");
//                    return;
//                }
//
//                var epmsModelPath = types[1].get('TypePath');
//
//                this._getEPMSProjects(workspace, epmsModelPath).then({
//                    scope:me,
//                    success:function(store){
//                        deferred.resolve(store);
//                    },
//                    failure:function(error){
//                        //me.setLoading(false);
//                        //Ext.Msg.alert('',msg);
//                    }
//                });
//
//
//            },
//            failure: function(msg){
//                Ext.Msg.alert('',msg);
//            },
//            scope: this
//        });


        return deferred.promise;

    },

    _addSelector: function(){
        // The data store containing the list of states
        var me = this;
        var quarters = Ext.create('Ext.data.Store', {
            fields: ['abbr', 'name','startDate','endDate'],
            data : [
                {"abbr":"Q12015", "name":"2015 - Q1", "startDate":"2014-10-01", "endDate":"2014-12-31"},
                {"abbr":"Q22015", "name":"2015 - Q2", "startDate":"2015-01-01", "endDate":"2015-03-31"},
                {"abbr":"Q32015", "name":"2015 - Q3", "startDate":"2015-04-01", "endDate":"2015-06-30"},
                {"abbr":"Q42015", "name":"2015 - Q4", "startDate":"2015-07-01", "endDate":"2015-09-30"},            
                {"abbr":"Q12016", "name":"2016 - Q1", "startDate":"2015-10-01", "endDate":"2015-12-31"},
                {"abbr":"Q22016", "name":"2016 - Q2", "startDate":"2016-01-01", "endDate":"2016-03-31"},
                {"abbr":"Q32016", "name":"2016 - Q3", "startDate":"2016-04-01", "endDate":"2016-06-30"},
                {"abbr":"Q42016", "name":"2016 - Q4", "startDate":"2016-07-01", "endDate":"2016-09-30"},
                {"abbr":"Q12017", "name":"2017 - Q1", "startDate":"2016-10-01", "endDate":"2016-12-31"},
                {"abbr":"Q22017", "name":"2017 - Q2", "startDate":"2017-01-01", "endDate":"2017-03-31"},
                {"abbr":"Q32017", "name":"2017 - Q3", "startDate":"2017-04-01", "endDate":"2017-06-30"},
                {"abbr":"Q42017", "name":"2017 - Q4", "startDate":"2017-07-01", "endDate":"2016-09-30"}                
            ]
        });

        var programs = []
        Ext.Object.each(me.programs,function(key,value){programs.push(value.program)});

        var programs_store = Ext.create('Ext.data.Store', {
            fields: ['Name','ObjectID'],
            data : programs
        });        

        this.add({
            xtype: 'combobox',
            fieldLabel: 'Choose Quarter',
            itemId: 'quarter-combobox',
            store: quarters,
            queryMode: 'local',
            displayField: 'name',
            valueField: 'abbr',
            margin: 5,
            listeners:{
                change: this._updateGoButton,
                scope: this,
            }

        });

        this.add({
            xtype: 'combobox',
            fieldLabel: 'Choose Programs',
            itemId: 'program-combobox',
            store: programs_store,
            multiSelect: true,
            queryMode: 'local',
            displayField: 'Name',
            valueField: 'ObjectID',
            margin: 5
        });

        this.add({
                xtype: 'rallybutton',
                text: 'Go',
                itemId: 'cb-go-button',
                cls: 'rly-small primary',
                disabled: true,
                margin: 5,
                listeners: {
                    scope: this,
                    click: this._updateQuarter
                }
        });

    },

    _updateQuarter: function(){
        var me = this;
        this.buttonPushed = true;
        var cb_quarter = this.down('#quarter-combobox');
        var cb_programs = this.down('#program-combobox');

        
        if (cb_quarter && cb_programs){
            var quarter = cb_quarter.findRecordByValue(cb_quarter.value);
            this.quarter_and_programs = {'quarter':quarter,'programs':cb_programs.value,'allPrograms':me.programs};
            this.fireEvent('change', this.quarter_and_programs);
            this.publish('quarterSelected', this.quarter_and_programs);
            if (this.stateful && this.stateId){
                this.saveState();
            }
        }

    },


    _getEPMSProjects:function(workspace,epmsModelPath){
        var me = this;
        var deferred = Ext.create('Deft.Deferred');
        var workspace_oid = workspace.ObjectID || workspace.get('ObjectID');

        var config = {
            model: epmsModelPath,
            fetch:['ObjectID','Project','Name','Workspace'],
            context: { 
                project: null,
                workspace: '/workspace/' + workspace_oid
            }
        };
        
        TSUtilities.loadWsapiRecords(config).then({
            success: function(records) {
                var epms_id_projects = {}
                Ext.Array.each(records,function(rec){
                    var project_oid = rec.get('Project').ObjectID;
                    
                    if ( Ext.isEmpty(epms_id_projects[project_oid]) ) {
                        epms_id_projects[project_oid] = {
                            program: rec.get('Project'),
                            projects: [],
                            workspace: workspace
                        }
                    }
                    
                    epms_id_projects[project_oid].projects.push(rec.getData());
                    
                });
                deferred.resolve(epms_id_projects);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
            
        });
        
        return deferred.promise;
    },

    _updateGoButton: function(cb) {
        if ( !Ext.isEmpty(cb.getValue()) ) {
            this.down('#cb-go-button').setDisabled(false);
        } else {
            this.down('#cb-go-button').setDisabled(true);
        }
    },

    _requestQuarter : function() {
        // only publish if the go button has been pushed
        if ( this.buttonPushed ) {
            this.publish('quarterSelected', this.quarter_and_programs || null);
            return;
        }
        
        console.log("Requested Quarter, but the user hasn't pushed the Go button");
        
    },

});
Ext.define('recordHolder',{
    data: {},
    constructor: function(config) {
        Ext.apply(this, config);
    },
    
    get: function(field) {
        return this.data[field];
    }
});

Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    
    saveCSVToFile:function(csv,file_name,type_object){
        if (type_object === undefined){
            type_object = {type:'text/csv;charset=utf-8'};
        }
        this.saveAs(csv,file_name, type_object);
    },
    
    saveAs: function(textToWrite, fileName)
    {
        this.logger.log('saveAs:', fileName);
        
        if (Ext.isIE9m){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for IE9 and below."});
            return;
        }

        var textFileAsBlob = null;
        try {
            textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        }
        catch(e){
            this.logger.log('Caught an error ', e);
            
            window.BlobBuilder = window.BlobBuilder ||
                        window.WebKitBlobBuilder ||
                    window.MozBlobBuilder ||
                    window.MSBlobBuilder;
            if (window.BlobBuilder ) { //&&  e.name === 'TypeError'){
                bb = new BlobBuilder();
                bb.append([textToWrite]);
                textFileAsBlob = bb.getBlob("text/plain");
            }

        }

        if (!textFileAsBlob){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for this browser."});
            return;
        }

        var fileNameToSaveAs = fileName;

        if (Ext.isIE10p){
            window.navigator.msSaveOrOpenBlob(textFileAsBlob,fileNameToSaveAs); // Now the user will have the option of clicking the Save button and the Open button.
            return;
        }

        var url = this.createObjectURL(textFileAsBlob);

        if (url){
            var downloadLink = document.createElement("a");
            if ("download" in downloadLink){
                downloadLink.download = fileNameToSaveAs;
            } else {
                //Open the file in a new tab
                downloadLink.target = "_blank";
            }

            downloadLink.innerHTML = "Download File";
            downloadLink.href = url;
            if (!Ext.isChrome){
                // Firefox requires the link to be added to the DOM
                // before it can be clicked.
                downloadLink.onclick = this.destroyClickedElement;
                downloadLink.style.display = "none";
                document.body.appendChild(downloadLink);
            }
            downloadLink.click();
        } else {
            Rally.ui.notify.Notifier.showError({message: "Export is not supported "});
        }

    },
    createObjectURL: function ( file ) {
        if ( window.webkitURL ) {
            return window.webkitURL.createObjectURL( file );
        } else if ( window.URL && window.URL.createObjectURL ) {
            return window.URL.createObjectURL( file );
        } else {
            return null;
        }
    },
    saveTextAsFile: function(textToWrite, fileName) {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    convertDataArrayToCSVText: function(data_array, requestedFieldHash){
       
        var text = '';
        Ext.each(Object.keys(requestedFieldHash), function(key){
            text += requestedFieldHash[key] + ',';
        });
        text = text.replace(/,$/,'\n');
        
        Ext.each(data_array, function(d){
            Ext.each(Object.keys(requestedFieldHash), function(key){
                if (d[key]){
                    if (typeof d[key] === 'object'){
                        if (d[key].FormattedID) {
                            text += Ext.String.format("\"{0}\",",d[key].FormattedID ); 
                        } else if (d[key].Name) {
                            text += Ext.String.format("\"{0}\",",d[key].Name );                    
                        } else if (!isNaN(Date.parse(d[key]))){
                            text += Ext.String.format("\"{0}\",",Rally.util.DateTime.formatWithDefaultDateTime(d[key]));
                        }else {
                            text += Ext.String.format("\"{0}\",",d[key].toString());
                        }
                    } else {
                        text += Ext.String.format("\"{0}\",",d[key] );                    
                    }
                } else {
                    text += ',';
                }
            },this);
            text = text.replace(/,$/,'\n');
        },this);
        return text;
    },
    _getCSVFromWsapiBackedGrid: function(grid,skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.create('Rally.data.wsapi.Store',{
            fetch: grid.getStore().config.fetch,
            filters: grid.getStore().config.filters,
            model: grid.getStore().config.model,
            pageSize: 200
        });
        
        var columns = grid.columns;
        
        var record_count = grid.getStore().getTotalCount(),
            page_size = grid.getStore().pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        Deft.Promise.all(promises).then({
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    getCSVFromRows: function(scope, grid, rows) {
        var me = this;
        var columns = grid.columns;
        var store = grid.getStore();
        
        console.log('getCSVFromRows');
        
        var model = grid.model;

        var csv = [];
        
        csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
        
        Ext.Array.each(rows,function(row){
            
            csv.push( me._getCSVFromRecord(Ext.create('recordHolder', { data:row}), grid, store) );
        });
        
        csv = csv.join('\r\n');
        return csv;
    },
    
    // custom grid assumes there store is fully loaded
    _getCSVFromCustomBackedGrid: function(grid, skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.clone( grid.getStore() );
        var columns = grid.columns;
        Rally.getApp().setLoading("Generating CSV...");
        
        var record_count = store.getTotalCount(),
            page_size = store.pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        
        Deft.Promise.all(promises).then({
            scope: this,
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    _getHeadersFromGrid: function(grid) {
        var headers = [];        
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.hidden ) { return; }
            
            if ( column.dataIndex || column.renderer ) {
                if ( column.csvText ) {
                    headers.push(column.csvText.replace('&nbsp;',' '));
                } else if ( column.text )  {
                    headers.push(column.text.replace('&nbsp;',' '));
                }
            }
        });
        
        return headers;
    },
    
    _getColumnNamesFromGrid: function(grid) {
        var names = [];
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.dataIndex || column.renderer ) {
                names.push(column.dataIndex);
            }
        });
        
        return names;
    },
    /*
     * will render using your grid renderer.  If you want it to ignore the grid renderer, 
     * have the column set _csvIgnoreRender: true
     */
    getCSVFromGrid:function(app, grid, skip_headers){
        this.logger.log("Exporting grid with store type:", Ext.getClassName(grid.getStore()));
        
        if ( Ext.getClassName(grid.getStore()) != "Rally.data.custom.Store" ) {
            return this._getCSVFromWsapiBackedGrid(grid,skip_headers);
        }
        
        return this._getCSVFromCustomBackedGrid(grid,skip_headers);
    },
    loadStorePage: function(grid, store, columns, page, total_pages){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('loadStorePage',page, total_pages);

        store.loadPage(page, {
            callback: function (records) {
                var csv = [];
                Rally.getApp().setLoading(Ext.String.format('Page {0} of {1} loaded',page, total_pages));
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    csv.push( this._getCSVFromRecord(record, grid, store) );
                }
                deferred.resolve(csv);
            },
            scope: this
        });
        return deferred;
    },
    
    _getCSVFromRecord: function(record, grid, store) {
        //console.log('record:', record);
        
        var mock_meta_data = {
            align: "right",
            classes: [],
            cellIndex: 9,
            column: null,
            columnIndex: 9,
            innerCls: undefined,
            recordIndex: 5,
            rowIndex: 5,
            style: "",
            tdAttr: "",
            tdCls: "x-grid-cell x-grid-td x-grid-cell-headerId-gridcolumn-1029 x-grid-cell-last x-unselectable",
            unselectableAttr: "unselectable='on'"
        };
        
        var node_values = [];
        var columns = grid.columns;
        
        Ext.Array.each(columns, function (column) {
            if (column.xtype == 'rallyrowactioncolumn'  || column.xtype == 'tsrowactioncolumn') {
                return;
            }
            
            if ( column.hidden ) {
                return;
            }
            
            if (column.dataIndex) {
                var column_name = column.dataIndex;
                
                var display_value = record.get(column_name);

                if (!column._csvIgnoreRender && ( column.renderer || column.exportRenderer) ) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    }
                }
                node_values.push(display_value);
            } else {
                var display_value = null;
                if (!column._csvIgnoreRender && column.renderer) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    }
                    node_values.push(display_value);
                }
            }
        }, this);
        
        var csv_string = "";
        Ext.Array.each(node_values, function(node_value,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node_value) ) {
                csv_string = csv_string + node_value;
            } else {
                csv_string = csv_string + '"' + node_value + '"';
            }

        });
        
        return csv_string;
    }

});
Ext.define('CA.technicalservices.RulePickerDialog', {
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.rulepickerdialog',

    //layout: 'fit',
    
    config: {
        /**
         * @cfg {String}
         * Title to give to the dialog
         */
        title: 'Choose Rule(s)',

        /**
         * @cfg {String}
         * Text to be displayed on the button when selection is complete
         */
        selectionButtonText: 'Done',
        /**
         * @cfg {Boolean}
         * Enables the dialog to be draggable.
         */
        draggable: true,

        /**
         * @cfg {String}|{String[]}
         * The ref(s) of items which should be selected when the chooser loads
         */
        rules: undefined,
        layout:{
            type: 'hbox',
            align: 'left'
        },
        minWidth: 800,
        minHeight: 500
    },

    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },

    selectionCache: [],

    initComponent: function() {
        this.callParent(arguments);

        this.addEvents(
            /**
             * @event itemschosen
             * Fires when user clicks done after choosing one or more rules
             * @param {CA.technicalservices.RulePickerDialog} source the dialog
             * @param {CA.techservices.validation.BaseRule[]} selection of an array of selected rules
             */
            'itemschosen'
        );

        this.addCls(['chooserDialog', 'chooser-dialog']);
    },

    beforeRender: function() {
        this.callParent(arguments);

        this.addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    itemId: 'doneButton',
                    text: this.selectionButtonText,
                    cls: 'primary rly-small',
                    scope: this,
                    disabled: false,
                    userAction: 'clicked done in dialog',
                    handler: function() {
                        this.fireEvent('itemschosen', this, this.getSelectedRecords());
                        this.close();
                    }
                },
                {
                    xtype: 'rallybutton',
                    text: 'Cancel',
                    cls: 'secondary rly-small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });

        if (this.introText) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                html: this.introText
            });
        }

        this._buildCheckboxes();

       // this.selectionCache = this.getInitialSelectedRecords() || [];
    },

    /**
     * Get the records currently selected in the dialog
     * {Rally.data.Model}|{Rally.data.Model[]}
     */
    getSelectedRecords: function() {
        return this.rules;
    },

    _buildCheckboxes: function() {
        console.log("_buildCheckboxes:", this.rules);
        // add three containers, one per rule model family(task,story,portfolioitem)
        this.add([
                {
                    xtype: 'panel',
                    title: '<h3>Portfolio Items</h3>',
                    itemId: 'portfolioRulesPanel',
                    layout: 'auto',
                    margin: 5,
                    height: 450,
                    width: 250
                },
                {
                    xtype: 'panel',
                    title: '<h3>Stories</h3>',
                    itemId: 'storyRulesPanel',
                    layout: 'auto',
                    margin: 5,                    
                    height: 450,
                    width: 250                    
                },
                            {
                    xtype: 'panel',
                    title: '<h3>Tasks</h3>',
                    itemId: 'taskRulesPanel',
                    layout: 'auto',
                    margin: 5,               
                    height: 450,
                    width: 250                    
                }
            ]
        );
        // now add the checkboxes for the rules to the appropriate panel
        Ext.Array.each(this.rules,function(rule){
            console.log('InsideArray:',rule.model,rule.label,rule);
            if (/^PortfolioItem*/.exec(rule.model)){
                this.down('#portfolioRulesPanel').add( {
                        xtype: 'rallycheckboxfield',
                        boxLabel: rule.label,
                        autoScroll: true,
                        name: rule.xtype,
                        height: 15,
                        padding: 10,
                        value: rule.active,  // boolean on whether the rule has been selected
                        listeners: {
                            change: function() {
                                rule.active = this.getValue();
                            }
                        }                 
                    });                
            } else if (/^HierarchicalRequirement/.exec(rule.model)){
                this.down('#storyRulesPanel').add( {
                        xtype: 'rallycheckboxfield',
                        boxLabel: rule.label,
                        autoScroll: true,
                        name: rule.xtype,
                        height: 15,
                        padding: 10,
                        value: rule.active,
                        listeners: {
                            change: function() {
                                rule.active = this.getValue();
                            }
                        }                 
                    });                  
            } else if (/^Task/.exec(rule.model)){
                this.down('#taskRulesPanel').add( {
                        xtype: 'rallycheckboxfield',
                        boxLabel: rule.label,
                        autoScroll: true,
                        name: rule.xtype,
                        height: 15,
                        padding: 10,
                        value: rule.active,
                        listeners: {
                            change: function() {
                                rule.active = this.getValue();
                            }
                        }                 
                    });                  
            } else {
                // No match on Model! drop the checkboxes on the raw panel. Will be a 
                // flag to see that we're handling a new model!
                this.add( {
                        xtype: 'rallycheckboxfield',
                        boxLabel: rule.label,
                        autoScroll: true,
                        name: rule.xtype,
                        height: 25,
                        value: rule.active,
                        listeners: {
                            change: function() {
                                rule.active = this.getValue();
                            }
                        }                 
                    });
            }                  
        },this );
    },

    _enableDoneButton: function() {
        this.down('#doneButton').setDisabled(this.selectionCache.length ? false : true);
    },

    _findRecordInSelectionCache: function(record){
        return _.findIndex(this.selectionCache, function(cachedRecord) {
            return cachedRecord.get('_ref') === record.get('_ref');
        });
    }
});
Ext.define('CA.techservices.validation.BaseRule',{
    extend: 'Ext.Base',
    /**
     * 
     * @cfg {Boolean} an indicator of whether this rule has been selected for use
     */
    active: false,
    
    /**
     * @cfg {Array} of project refs for representing the strategy part of the project hierarchy 
     */
    strategyProjects:[],
    
    /**
     * @cfg {Array} of project refs for representing the execution or delivery teams part of the project hierarchy 
     */
    deliveryTeamProjects:[],

    /**
     * 
     * @cfg
     * {String} model The name of a record type that this rule applies to 
     */
    model: null,
    /**
     * 
     * @cfg {String} a human-readable label for the chart that will be made from the rule
     */
    label: 'No label supplied for this rule',
    
    constructor: function(config) {
        Ext.apply(this,config);
    },
    
    shouldExecuteRule: true,
    
    getDescription: function() {
        console.error('getRuleDescription is not implemented in subclass ', this.self.getName());
        return null;
    },
    
    getFetchFields: function() {
        return [];
    },
    
    getModel: function() {
        return this.model;
    },
    
    getFilters: function() {
        console.error('getFilters not implemented in subclass ', this.self.getName());
        throw 'getFilters not implemented in subclass ' + this.self.getName();
    },
    // return false if the record doesn't match
    // return string if record fails the rule
    applyRuleToRecord: function(record) {
        console.error('applyRuleToRecord not implemented in subclass ', this.self.getName());
        throw 'applyRuleToRecord not implemented in subclass ' + this.self.getName();
        
        return record;
    },
    
    /* override to allow the validator to check if the rule makes sense to run 
     * (e.g., the field checker for fields that don't even exist)
     * 
     * resolve promise with text if problem -- the validator will return the text so
     * it can be put into a description
     * 
     * The rule will still be executed unless this.shouldExecuteRule is set to false (and
     * the rule class implements skipping because of this.shouldExecuteRule).
     * 
     * A rule class could be multi-part and only partially fail, so execution or not execution
     * needs to be handled by the class itself.
     * 
     */
    precheckRule: function() {
        return null;
    },
    
    getUserFriendlyRuleLabel: function() {        
        return this.label;
    }
});
Ext.define('CA.techservices.validation.EpicWithoutParentRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsepicwithoutparentrule',
   
    config: {
        /*
        * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
        * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
        */

        // discovered in app.js, passed on crea
        portfolioItemTypes:[],
        //model: 'PortfolioItem/Feature - types loaded in base class.',
        model: null,
        label: 'Epic No Parent'

    },
    constructor: function(config) {
        Ext.apply(this,config);
        this.model = this.portfolioItemTypes[1];
        this.label = this.getLabel();
    },
    getDescription: function() {
        console.log("EpicNoParent.getDescription:",this);
        
        var msg = Ext.String.format(
            "{0} must have a parent *{1}*.",
            /[^\/]*$/.exec(this.model),
            /[^\/]*$/.exec(this.portfolioItemTypes[2])
            );
        return msg;
    },
    
    getFetchFields: function() {
        return ['Name','Project','Parent'];
    },

    getLabel: function(){
        this.label = Ext.String.format(
            "{0} no parent {1}",
            /[^\/]*$/.exec(this.getModel()),
            /[^\/]*$/.exec(this.portfolioItemTypes[2])
        );
        return this.label;
    },

    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        console.log("EpicNoParent.applyRuleToRecord:",record);        
        
        if (record.get('Parent') == null) {
            return this.getDescription();               
        } else {
            return null; // no rule violation
        }
    },
    
    getFilters: function() {        
       // return Rally.data.wsapi.Filter.and([
       //     {property:'Parent',operator:'=',value:null}
       // ]);
       return [];
    }
});
Ext.define('CA.techservices.validation.FeatureRequiredFieldRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsfeaturerequiredfieldrule',
    
   
    config: {
        model: 'portfolioitem/feature',
        requiredFields: [],
        label: 'Missing Required Fields (Feature)'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Features that are missing expected fields."
        );
    },
    
    getFetchFields: function() {
        return this.requiredFields;
    },
    
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        var missingFields = [];

        Ext.Array.each(this.requiredFields, function (field_name) {
            if ( this.isValidField(record, field_name) ) {
                var value = record.get(field_name);
                if ( Ext.isEmpty(value) ) {
                    missingFields.push(record.getField(field_name).displayName);
                }
            }
        },this);
        if (missingFields.length === 0) {
            return false;
        }
        return Ext.String.format('Fields Missing: {0}', missingFields.join(','))
    },
    
    /* 
     * override to allow the validator to check if the rule makes sense to run 
     * 
     * resolve promise with text if problem
     * 
     */
    precheckRule: function() {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
                
        this.requestedRequiredFields = this.requiredFields;
        
        if ( Ext.isString(this.model) ) {
            Rally.data.ModelFactory.getModel({
                type: this.model,
                success: function(model) {
                    var bad_fields = Ext.Array.filter(me.requiredFields, function (field_name) {
                        return !me.isValidField(model,field_name);
                    });
                    
                    Ext.Array.each(bad_fields, function(field){
                        Ext.Array.remove(me.requiredFields, field);
                    });
                    
                    var text = null;
                    if ( bad_fields.length > 0 ) {
                        text = "Cannot perform Field Validation for Stories for nonexistent fields: " + bad_fields.join(', ');
                    }
                    
                    deferred.resolve(text);
                },
                failure: function() {
                    deferred.reject("Issue prechecking Rule");
                }
            });
        }
        
        return deferred.promise;
    },
    
    getFilters: function() {        
        var filters = Ext.Array.map(this.requiredFields, function(field) {
            return { property: field, value: "" };
        });
        
        var field_filter = Rally.data.wsapi.Filter.or(filters);

        return field_filter;
    }
});
Ext.define('CA.techservices.validation.FeatureNoPlannedStartEndDateRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsfeaturenoplannedstartenddaterule',
   
    config: {
        /*
        * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
        * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
        */

        // discovered in app.js, passed on create
        portfolioItemTypes:[],
        
        //model: 'PortfolioItem/Feature - types loaded in base class.',
        model: null,
        label: 'Feature No Planned Start/End Date'

    },
    constructor: function(config) {
        Ext.apply(this,config);
        this.model = this.portfolioItemTypes[0];
        this.label = this.getLabel();
    },
    getDescription: function() {
        console.log("featureNoPlannedStartEndDate.getDescription: ",this);
        
        var msg = Ext.String.format(
            "{0} must have both Planned Start and End Dates.",
            /[^\/]*$/.exec(this.model)
            );

        return msg;
    },
    
    getFetchFields: function() {
        return ['Name','PlannedStartDate','PlannedEndDate'];
    },

    getLabel: function(){
        this.label = Ext.String.format(
            "Planned Start/End Date Missing ({0})",
            /[^\/]*$/.exec(this.getModel())
        );

        return this.label;
    },

    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        console.log("featureNoPlannedStartEndDate.applyRuleToRecord:",record);        
        
        if ((record.get('PlannedStartDate') == null) || ( record.get('PlannedEndDate') == null )) {
            return this.getDescription();
        } else {
            return null; // no rule violation   
        }
    },
    
    getFilters: function() {        

       // return Rally.data.wsapi.Filter.and([
       //     {property:'Parent',operator:'=',value:null}
       // ]);
       return [];
    }
});
Ext.define('CA.techservices.validation.FeatureScheduledProjectNotDeliveryRootRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsfeaturescheduledprojectnotdeliveryrootrule',
   
    config: {
        /*
        * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
        * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
        */

        portfolioItemTypes:[],
        //model: 'PortfolioItem/Feature - types loaded in base class.',
        model: null,
        label: 'Scheduled, Wrong Project'
    },
    constructor: function(config) {
        Ext.apply(this,config);
        this.model = this.portfolioItemTypes[0];
        this.label = this.getLabel();
    },
    getDescription: function() {
        console.log("FeatureScheduledProjectNotDelivery.getDescription:",this);
        
        var msg = Ext.String.format(
            "Scheduled {0} must be saved into a Delivery Team project.",
            /[^\/]*$/.exec(this.model)
            );
        return msg;
    },
    
    getFetchFields: function() {
        return ['Name','Project','Parent','Release'];
    },

    getLabel: function(){
        this.label = Ext.String.format(
            "Scheduled, Wrong Project ({0})",
            /[^\/]*$/.exec(this.getModel())
        );
        return this.label;
    },

    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        // this rule: Scheduled Feature is not in specified 'delivery' folder.
        var me = this;

        console.log("featureScheduledInWrongProject.applyRuleToRecord:",record,me.deliveryTeamProjects);   
        console.log('featureScheduledInWrongProject.applyRuleToRecord2:',me.deliveryTeamProjects);     
        
        // slice out the project._ref from each project. Then compare on that!
        var projectRefs = Ext.Array.map(me.deliveryTeamProjects,function(project){return project._ref});

        if ((record.get('Release') != null) && ( !Ext.Array.contains(projectRefs, record.get('Project')._ref))) {
            return this.getDescription();               
        } else {
            return null; // no rule violation
        }
    },
    
    getFilters: function() {        

       // return Rally.data.wsapi.Filter.and([
       //     {property:'Parent',operator:'=',value:null}
       // ]);
       return [];
    }
});
Ext.define('CA.techservices.validation.FeatureUnscheduledProjectNotStrategyRootRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsfeatureunscheduledprojectnotstrategyrootrule',
   
    config: {
        /*
        * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
        * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
        */

        // discovered in app.js, passed on crea
        portfolioItemTypes:[],
        //model: 'PortfolioItem/Feature - types loaded in base class.',
        model: null,
        label: 'Unscheduled, Wrong Project'

    },
    constructor: function(config) {
        Ext.apply(this,config);
        this.model = this.portfolioItemTypes[0];
        this.label = this.getLabel();
    },
    getDescription: function() {
        console.log("getDescription: WrongProject:",this);
        
        var msg = Ext.String.format(
            "Unscheduled {0} must be saved into a Business Planning project.",
            /[^\/]*$/.exec(this.model)
            );

        return msg;
    },
    
    getFetchFields: function() {
        return ['Name','Project','Parent','Release'];
    },

    getLabel: function(){
        this.label = Ext.String.format(
            "Unscheduled, Wrong Project ({0})",
            /[^\/]*$/.exec(this.getModel())
        );

        return this.label;
    },

    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        // this rule: Unscheduled Feature is not in specified 'strategy' folder.
        var me = this;

        var projectRefs = Ext.Array.map(me.strategyProjects,function(project){return project._ref});
        console.log('UnscheduledFeatureInWrongProject.Refs:',projectRefs);

        if ((record.get('Release') == null) && ( !Ext.Array.contains(projectRefs, record.get('Project')._ref )) ){
            return this.getDescription();
        } else {
            return null; // no rule violation   
        }
    },
    
    getFilters: function() {        

       // return Rally.data.wsapi.Filter.and([
       //     {property:'Parent',operator:'=',value:null}
       // ]);
       return [];
    }
});
Ext.define('CA.techservices.validation.FeatureWithoutParentRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsfeaturewithoutparentrule',
   
    config: {
        /*
        * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
        * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
        */

        // discovered in app.js, passed on crea
        portfolioItemTypes:[],
        //model: 'PortfolioItem/Feature - types loaded in base class.',
        model: null,
        label: 'No Parent (Feature)'

    },
    constructor: function(config) {
        Ext.apply(this,config);
        this.model = this.portfolioItemTypes[0];
        this.label = this.getLabel();
    },
    getDescription: function() {
        console.log("FeatureNoParent.getDescription: ",this);
        
        var msg = Ext.String.format(
            "{0} must be linked to a *{1}*.",
            /[^\/]*$/.exec(this.model),
            /[^\/]*$/.exec(this.portfolioItemTypes[1])
            );
        return msg;
    },
    
    getFetchFields: function() {
        return ['Name','Project','Parent'];
    },

    getLabel: function(){
        this.label = Ext.String.format(
            "No Parent ({0})",
            /[^\/]*$/.exec(this.getModel())
        );
        return this.label;
    },

    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        console.log("FeatureNoParent.applyRuleToRecord:",record);        
        // this rule: Feature has no parent.
        if (record.get('Parent') == null) {
            return this.getDescription();               
        } else {
            return null; // no rule violation
        }
    },
    
    getFilters: function() {        
       // return Rally.data.wsapi.Filter.and([
       //     {property:'Parent',operator:'=',value:null}
       // ]);
       return [];
    }
});
Ext.define('CA.techservices.validation.Pi3WithoutParentRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tspi3withoutparentrule',
   
    config: {
        /*
        * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
        * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
        */

        // discovered in app.js, passed on crea
        portfolioItemTypes:[],
        //model: 'PortfolioItem/Feature - types loaded in base class.',
        model: null,
        label: 'Initiative No Parent'

    },
    constructor: function(config) {
        Ext.apply(this,config);
        this.model = this.portfolioItemTypes[3];
        this.label = this.getLabel();
    },
    getDescription: function() {
        console.log("Pi3NoParent.getDescription:",this);
        
        var msg = Ext.String.format(
            "{0} must have a parent *{1}*.",
            /[^\/]*$/.exec(this.model),
            /[^\/]*$/.exec(this.portfolioItemTypes[4])
            );
        return msg;
    },
    
    getFetchFields: function() {
        return ['Name','Project','Parent'];
    },

    getLabel: function(){
        this.label = Ext.String.format(
            "{0} no parent {1}",
            /[^\/]*$/.exec(this.getModel()),
            /[^\/]*$/.exec(this.portfolioItemTypes[4])
        );
        return this.label;
    },

    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        console.log("Pi3NoParent.applyRuleToRecord:",record);        
        
        if (record.get('Parent') == null) {
            return this.getDescription();               
        } else {
            return null; // no rule violation
        }
    },
    
    getFilters: function() {        
       // return Rally.data.wsapi.Filter.and([
       //     {property:'Parent',operator:'=',value:null}
       // ]);
       return [];
    }
});
Ext.define('CA.techservices.validation.Pi4WithoutParentRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tspi4withoutparentrule',
   
    config: {
        /*
        * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
        * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
        */

        // discovered in app.js, passed on crea
        portfolioItemTypes:[],
        //model: 'PortfolioItem/Feature - types loaded in base class.',
        model: null,
        label: 'Objective No Parent'

    },
    constructor: function(config) {
        Ext.apply(this,config);
        this.model = this.portfolioItemTypes[4];
        this.label = this.getLabel();
    },
    getDescription: function() {
        console.log("ObjectiveNoParent.getDescription:",this);
        
        var msg = Ext.String.format(
            "{0} must have a parent *{1}*.",
            /[^\/]*$/.exec(this.model),
            /[^\/]*$/.exec(this.portfolioItemTypes[5])
            );
        return msg;
    },
    
    getFetchFields: function() {
        return ['Name','Project','Parent'];
    },

    getLabel: function(){
        this.label = Ext.String.format(
            "{0} no parent {1}",
            /[^\/]*$/.exec(this.getModel()),
            /[^\/]*$/.exec(this.portfolioItemTypes[5])
        );
        return this.label;
    },

    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        console.log("Pi4NoParent.applyRuleToRecord:",record);        
        
        if (record.get('Parent') == null) {
            return this.getDescription();               
        } else {
            return null; // no rule violation
        }
    },
    
    getFilters: function() {        
       // return Rally.data.wsapi.Filter.and([
       //     {property:'Parent',operator:'=',value:null}
       // ]);
       return [];
    }
});
Ext.define('CA.techservices.validation.StoryCompletedNoActuals',{
    extend: 'CA.techservices.validation.BaseRule',
    alias: 'widget.tsstorycompletednoactuals',
    config: {
        model: 'HierarchicalRequirement',
        label: 'Completed without Actuals (Story)',
        completedStates: ['Completed','Accepted']
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Stories that have reached the Completed state but have nothing in the Actuals field on their tasks."
        );
    },
    
    getFetchFields: function() {
        return ['TaskActualTotal','ScheduleState'];
    },
    
    getFilters: function() {
        return Rally.data.wsapi.Filter.and([
            {property:'ScheduleState',operator:'>=',value:'Completed'},
            {property:'TaskActualTotal',operator: '<', value: .0000001 },
            {property:'DirectChildrenCount',value: 0}
        ]);
    },
    // return false if the record doesn't match
    // return string if record fails the rule
    applyRuleToRecord: function(record) {
        if ( record.get('TaskActualTotal') > 0 || !Ext.Array.contains(this.completedStates, record.get('ScheduleState')) ) {
            return false; 
        }
        return Ext.String.format('Completed but has no Actuals (State:{0})', record.get('ScheduleState'));
    },
    
    getUserFriendlyRuleLabel: function() {        
        return this.label;
    }
});
Ext.define('CA.techservices.validation.StoryRequiredFieldRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsstoryrequiredfieldrule',
    
   
    config: {
        model: 'HierarchicalRequirement',
        requiredFields: [],
        label: 'Missing Required Fields (Story)'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Stories that are missing expected fields."
        );
    },
    
    getFetchFields: function() {
        return this.requiredFields;
    },
    
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        var missingFields = [];

        Ext.Array.each(this.requiredFields, function (field_name) {
            if ( this.isValidField(record, field_name) ) {
                var value = record.get(field_name);
                if ( Ext.isEmpty(value) ) {
                    missingFields.push(record.getField(field_name).displayName);
                }
            }
        },this);
        if (missingFields.length === 0) {
            return false;
        }
        return Ext.String.format('Fields Missing: {0}', missingFields.join(','))
    },
    
    /* 
     * override to allow the validator to check if the rule makes sense to run 
     * 
     * resolve promise with text if problem
     * 
     */
    precheckRule: function() {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
                
        this.requestedRequiredFields = this.requiredFields;
        
        if ( Ext.isString(this.model) ) {
            Rally.data.ModelFactory.getModel({
                type: this.model,
                success: function(model) {
                    var bad_fields = Ext.Array.filter(me.requiredFields, function (field_name) {
                        return !me.isValidField(model,field_name);
                    });
                    
                    Ext.Array.each(bad_fields, function(field){
                        Ext.Array.remove(me.requiredFields, field);
                    });
                    
                    var text = null;
                    if ( bad_fields.length > 0 ) {
                        text = "Cannot perform Field Validation for Stories for nonexistent fields: " + bad_fields.join(', ');
                    }
                    
                    deferred.resolve(text);
                },
                failure: function() {
                    deferred.reject("Issue prechecking Rule");
                }
            });
        }
        
        return deferred.promise;
    },
    
    getFilters: function() {        
        var filters = Ext.Array.map(this.requiredFields, function(field) {
            return { property: field, value: "" };
        });
        
        var field_filter = Rally.data.wsapi.Filter.or(filters);
        var leaf_filter = Ext.create('Rally.data.wsapi.Filter',{property:'DirectChildrenCount',value: 0});
        
        return leaf_filter.and(field_filter);
    }
});
Ext.define('CA.techservices.validation.StoryNoNullPlanEstimateRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsstorynonullplanestimaterule',
    
   
    config: {
        model: 'HierarchicalRequirement',
        label: 'Null Plan Estimate (Story)'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Stories in a current or past iteration should not be greater than defined and missing a plan estimate."
        );
    },
    
    getFetchFields: function() {
        return ['PlanEstimate','Iteration','ScheduleState'];
    },
    
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        var missingFields = [];

        if ( Ext.isEmpty(record.get('Iteration') ) ) {
            return null;
        }
        
        var today = Rally.util.DateTime.toIsoString(new Date());
        
        if ( record.get('Iteration').StartDate > today ) {
            return null;
        }
        
        if ( record.get('ScheduleState') == "Defined" ) {
            return null;
        }
        
        if ( !Ext.isEmpty(record.get('PlanEstimate') ) ) {
            return null;
        }
        return Ext.String.format('Has null for plan estimate');
    },
    
    getFilters: function() {        
        var today = Rally.util.DateTime.toIsoString(new Date());

        return Rally.data.wsapi.Filter.and([
            {property:'PlanEstimate',operator:'>',value:0},
            {property:'Iteration.StartDate',operator: '<', value: today },
            {property:'ScheduleState',operator: '>', value: 'Defined' }
        ]);
    }
});
Ext.define('CA.techservices.validation.StoryWithFeatureAndFeatureProjectNotDeliveryRoot',{
    extend: 'CA.techservices.validation.BaseRule',
    alias: 'widget.tsstorywithfeatureandfeatureprojectnotdeliveryroot',
    config: {
        portfolioItemTypes:[],
        model: 'HierarchicalRequirement',
        label: 'Story Feature in Wrong Project(Story)'                
    },
    constructor: function(config) {
        Ext.apply(this,config);
        this.label = this.getLabel();
    },

    getDescription: function() {
        var explanation = Ext.String.format("<strong>{0}</strong>: Stories must be associated with a {1}, and that {1} must be in the Delivery Team project.",
            this.label,
            /[^\/]*$/.exec(this.portfolioItemTypes[0]) 
            );

        console.log('StoryFeatureWrongProject.getDescription: ',explanation);

        return explanation;
    },

    getFetchFields: function() {
        return [this.portfolioItemTypes[0],'Parent','c_EPMSid'];
    },
    
    getFilters: function() {
        var propertyPortfolioItemName = /[^\/]*$/.exec(this.portfolioItemTypes[0]) + '.Parent.c_EPMSid'; // Feature name in this workspace plus the Parent.c_EPMSid
        
        console.log('StoryFeatureWrongProject.getFilters: ',propertyPortfolioItemName );

        // return Rally.data.wsapi.Filter.and([
        //     {property: propertyPortfolioItemName, operator:'=', value:''},
        //     {property:'DirectChildrenCount', value: 0}        
        // ]);
        return [];
    },

    getLabel: function(){
        this.label = Ext.String.format(
            "{0} Wrong Project (Story)",
            /[^\/]*$/.exec(this.portfolioItemTypes[0])
        );
        return this.label;
    },

    /* model MUST be a wsapi model, not its name */
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    /* override to allow the validator to check if the rule makes sense to run 
     * (e.g., the field checker for fields that don't even exist)
     * 
     * resolve promise with text if problem -- the validator will return the text so
     * it can be put into a description
     * 
     * The rule will still be executed unless this.shouldExecuteRule is set to false (and
     * the rule class implements skipping because of this.shouldExecuteRule).
     * 
     * A rule class could be multi-part and only partially fail, so execution or not execution
     * needs to be handled by the class itself.
     * 
     */
    precheckRule: function() {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        Rally.data.ModelFactory.getModel({
            type: 'PortfolioItem',
            success: function(model) {
                var text = null;
                if ( !me.isValidField(model,'c_EPMSid') ) {
                    text = "EPMS ID check will not be run.  PortfolioItem records do not have a c_EPMSid field ";
                    me.shouldExecuteRule = false;
                    me._filters = Rally.data.wsapi.Filter.and([{property:'ObjectID',value:0}])
                }                
                deferred.resolve(text);
            },
            failure: function() {
                deferred.reject("Issue prechecking Rule");
            }
        });        
        return deferred.promise;
    },
   
    // return false if the record doesn't match
    // return string if record fails the rule
    applyRuleToRecord: function(record) {
        var me = this;

        // check precheck rule first and exit if fails
        if ( ! this.shouldExecuteRule ) { return false; }
        
        if ( Ext.isEmpty(record.get(this.portfolioItemTypes[0])) ) {
            return 'Has no EPMS ID (' + /[^\/]*$/.exec(this.portfolioItemTypes[0]) + ')';
        }
        
        if ( Ext.isEmpty(record.get(this.portfolioItemTypes[0]).Parent )) {
            return 'Has no EPMS ID (no EPMS Project)';
        }
        
        if ( Ext.isEmpty(record.get(this.portfolioItemTypes[0]).Parent.c_EPMSid) ) {
            return 'Has no EPMS ID';
        }

        
        return false;
    },
    
    getUserFriendlyRuleLabel: function() {        
        return this.label;
    },
    
});
Ext.define('CA.techservices.validation.StoryWithoutEPMSID',{
    extend: 'CA.techservices.validation.BaseRule',
    alias: 'widget.tsstorywithoutepmsid',
    config: {
        portfolioItemTypes:[],
        model: 'HierarchicalRequirement',
        label: 'Missing EPMS ID (Story)'
    },
    constructor: function(config) {
        Ext.apply(this,config);
    },

    _filters: Rally.data.wsapi.Filter.and([
        {property:'Feature.Parent.c_EPMSid',operator:'=',value:''},
        {property:'DirectChildrenCount',value: 0}
    ]),
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Stories that don't trace to a EPMS Project with an EPMS ID.  This can be because the EPMS Project doesn't have" +
            " an ID, because the Feature isn't related to an EPMS Project, or because there's no Feature for the story."
        );
    },
    
    getFetchFields: function() {
        return [/[^\/]*$/.exec(this.portfolioItemTypes[0]),'Parent','c_EPMSid'];
    },
    
    getFilters: function() {
        return this._filters;
    },
    
    /* model MUST be a wsapi model, not its name */
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    /* override to allow the validator to check if the rule makes sense to run 
     * (e.g., the field checker for fields that don't even exist)
     * 
     * resolve promise with text if problem -- the validator will return the text so
     * it can be put into a description
     * 
     * The rule will still be executed unless this.shouldExecuteRule is set to false (and
     * the rule class implements skipping because of this.shouldExecuteRule).
     * 
     * A rule class could be multi-part and only partially fail, so execution or not execution
     * needs to be handled by the class itself.
     * 
     */
    precheckRule: function() {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        Rally.data.ModelFactory.getModel({
            type: 'PortfolioItem',
            success: function(model) {
                var text = null;
                if ( !me.isValidField(model,'c_EPMSid') ) {
                    text = "EPMS ID check will not be run.  PortfolioItem records do not have a c_EPMSid field ";
                    me.shouldExecuteRule = false;
                    me._filters = Rally.data.wsapi.Filter.and([{property:'ObjectID',value:0}])
                }
                
                deferred.resolve(text);
            },
            failure: function() {
                deferred.reject("Issue prechecking Rule");
            }
        });
        
        return deferred.promise;
    },
    // return false if the record doesn't match
    // return string if record fails the rule
    applyRuleToRecord: function(record) {
        if ( ! this.shouldExecuteRule ) { return false; }
        
        if ( Ext.isEmpty(record.get(/[^\/]*$/.exec(this.portfolioItemTypes[0])) )) {
            return 'Has no EPMS ID (' + /[^\/]*$/.exec(this.portfolioItemTypes[0]) + ')';
        }
        
        if ( Ext.isEmpty(record.get(/[^\/]*$/.exec(this.portfolioItemTypes[0])).Parent )) {
            return 'Has no EPMS ID (no ' + /[^\/]*$/.exec(this.portfolioItemTypes[1]) + ')';
        }
        
        if ( Ext.isEmpty(record.get(/[^\/]*$/.exec(this.portfolioItemTypes[0])).Parent.c_EPMSid) ) {
            return 'Has no EPMS ID';
        }
        return false;
    },
    
    getUserFriendlyRuleLabel: function() {        
        return this.label;
    }
});
Ext.define('CA.techservices.validation.TaskActiveNoToDo',{
    extend: 'CA.techservices.validation.BaseRule',
    alias: 'widget.tstaskactivenotodo',
    config: {
        model: 'Task',
        label: 'Incomplete Task Without ToDo'
    },
    
    getFetchFields: function() {
        return ['ToDo','State'];
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Tasks that are not yet complete but don't have hours in the To Do field."
        );
    },
    
    getFilters: function() {
        return Rally.data.wsapi.Filter.and([
            {property:'ToDo',operator: '<', value: .0000001 },
            {property:'State',operator: '<', value: 'Completed' }
        ]);
    },
    // return false if the record doesn't match
    // return string if record fails the rule
    applyRuleToRecord: function(record) {
        if ( record.get('ToDo') > 0 || record.get('State') == "Completed" ) {
            return false; 
        }
        return Ext.String.format('Is Active But Has No ToDo (State:{0})', record.get('State'));
    },
    
    getUserFriendlyRuleLabel: function() {        
        return this.label;
    }
});
Ext.define('CA.techservices.validation.TaskCompletedNoActuals',{
    extend: 'CA.techservices.validation.BaseRule',
    alias: 'widget.tstaskcompletednoactuals',
    config: {
        model: 'Task',
        label: 'Completed Without Actuals (Task)',
        completedStates: ['Completed']
    },
    
    getFetchFields: function() {
        return ['Actuals','State'];
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Tasks that are Completed but do not have any hours in the Actuals field."
        );
    },
    
    getFilters: function() {
        return Rally.data.wsapi.Filter.and([
            {property:'State',operator:'=',value:'Completed'},
            {property:'Actuals',operator: '<', value: .0000001 }
        ]);
    },
    // return false if the record doesn't match
    // return string if record fails the rule
    applyRuleToRecord: function(record) {
        if ( record.get('Actuals') > 0 || !Ext.Array.contains(this.completedStates, record.get('State')) ) {
            return false; 
        }
        return Ext.String.format('Completed but has no Actuals (State:{0})', record.get('State'));
    },
    
    getUserFriendlyRuleLabel: function() {        
        return this.label;
    }
});
Ext.define('CA.techservices.validation.TaskRequiredFieldRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tstaskrequiredfieldrule',
    
    config: {
        model: 'Task',
        requiredFields: [],
        label: 'Required Fields Are Missing (Task)'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Tasks that are missing expected fields."
        );
    },
    
    getFetchFields: function() {
        return this.requiredFields;
    },
    
    /* model MUST be a model not just a model name */
    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        var missingFields = [];

        Ext.Array.each(this.requiredFields, function (field_name) {
            if ( this.isValidField(record, field_name) ) {
                var value = record.get(field_name);
                if ( Ext.isEmpty(value) ) {
                    missingFields.push(record.getField(field_name).displayName);
                }
            }
        },this);
        if (missingFields.length === 0) {
            return false;
        }
        return Ext.String.format('Fields Missing: {0}', missingFields.join(','))
    },
    
    /* 
     * override to allow the validator to check if the rule makes sense to run 
     * 
     * resolve promise with text if problem
     * 
     */
    precheckRule: function() {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
                
        this.requestedRequiredFields = this.requiredFields;
        
        if ( Ext.isString(this.model) ) {
            Rally.data.ModelFactory.getModel({
                type: this.model,
                success: function(model) {
                    var bad_fields = Ext.Array.filter(me.requiredFields, function (field_name) {
                        return !me.isValidField(model,field_name);
                    });
                    
                    Ext.Array.each(bad_fields, function(field){
                        Ext.Array.remove(me.requiredFields, field);
                    });
                    
                    var text = null;
                    if ( bad_fields.length > 0 ) {
                        text = "Cannot perform Field Validation for Tasks for nonexistent fields: " + bad_fields.join(', ');
                    }
                    
                    deferred.resolve(text);
                },
                failure: function() {
                    deferred.reject("Issue prechecking Rule");
                }
            });
        }
        
        return deferred.promise;
    },
    
    getFilters: function() {        
        var filters = Ext.Array.map(this.requiredFields, function(field) {
            return { property: field, value: "" };
        });
        
        return Rally.data.wsapi.Filter.or(filters);
    }
});
Ext.define('CA.techservices.validation.TaskTodoNoEstimate',{
    extend: 'CA.techservices.validation.BaseRule',
    alias: 'widget.tstasktodonoestimate',
    config: {
        model: 'Task',
        label: 'Positive ToDo But No Estimate (Task)'
    },
    
    getDescription: function() {
        return Ext.String.format("<strong>{0}</strong>: {1}",
            this.label,
            "Tasks that have hours left in the To Do field but no Estimate."
        );
    },
    
    getFetchFields: function() {
        return ['ToDo','Estimate'];
    },
    
    getFilters: function() {
        return Rally.data.wsapi.Filter.and([
            {property:'ToDo',operator:'>',value:0},
            {property:'Estimate',operator: '<', value: .0000001 }
        ]);
    },
    // return false if the record doesn't match
    // return string if record fails the rule
    applyRuleToRecord: function(record) {
        if ( !record.get('ToDo') > 0 || record.get('Estimate') > 0 ) {
            return false; 
        }
        return Ext.String.format('Has ToDo But No Estimate (ToDo:{0})', record.get('ToDo'));
    },
    
    getUserFriendlyRuleLabel: function() {        
        return this.label;
    }
});
Ext.define('CA.techservices.validation.ThemeNoPlannedStartEndDateRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsthemenoplannedstartenddaterule',
   
    config: {
        /*
        * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
        * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
        */
        
        // discovered in app.js, passed on crea
        portfolioItemTypes:[],
        //model: 'PortfolioItem/Feature - types loaded in base class.',
        model: null,
        label: 'Feature No Planned Start/End Date'

    },
    constructor: function(config) {
        Ext.apply(this,config);
        this.model = this.portfolioItemTypes[2];
        this.label = this.getLabel();
    },
    getDescription: function() {
        console.log("themeNoPlannedStartEndDate.getDescription: ",this);
        
        var msg = Ext.String.format(
            "{0} must have both Planned Start and End Dates.",
            /[^\/]*$/.exec(this.model)
            );

        return msg;
    },
    
    getFetchFields: function() {
        return ['Name','PlannedStartDate','PlannedEndDate'];
    },

    getLabel: function(){
        this.label = Ext.String.format(
            "Planned Start/End Date Missing ({0})",
            /[^\/]*$/.exec(this.getModel())
        );

        return this.label;
    },

    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        console.log("themeNoPlannedStartEndDate.applyRuleToRecord:",record);        
        
        if ((record.get('PlannedStartDate') == null) || ( record.get('PlannedEndDate') == null )) {
            return this.getDescription();
        } else {
            return null; // no rule violation   
        }
    },
    
    getFilters: function() {        

       // return Rally.data.wsapi.Filter.and([
       //     {property:'Parent',operator:'=',value:null}
       // ]);
       return [];
    }
});
Ext.define('CA.techservices.validation.ThemeWithoutEpmsIdRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsthemewithoutepmsidrule',
   
    config: {
        /*
        * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
        * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
        */

        // discovered in app.js, passed on crea
        portfolioItemTypes:[],

        //model: 'PortfolioItem/Feature - types loaded in base class.',
        model: null,
        label: 'EPMS Project wo EPMS ID'

    },
    constructor: function(config) {
        Ext.apply(this,config);
        this.model = this.portfolioItemTypes[2];
        this.label = this.getLabel();
    },
    getDescription: function() {
        console.log("ThemeNoEpmsId.getDescription:",this);
        
        var msg = Ext.String.format(
            "{0} must have an EPMS ID.",
            /[^\/]*$/.exec(this.model)
            );
        return msg;
    },
    
    getFetchFields: function() {
        return ['Name','Project','Parent'];
    },

    getLabel: function(){
        this.label = Ext.String.format(
            "{0} no EPMS ID",
            /[^\/]*$/.exec(this.getModel())
        );
        return this.label;
    },

    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        console.log("ThemeNoEpmsId.applyRuleToRecord:",record);        
        
        if (record.get('c_EPMSid') == null) {
            return this.getDescription();               
        } else {
            return null; // no rule violation
        }
    },
    
    getFilters: function() {        
       // return Rally.data.wsapi.Filter.and([
       //     {property:'Parent',operator:'=',value:null}
       // ]);
       return [];
    }
});
Ext.define('CA.techservices.validation.ThemeWithoutParentRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsthemewithoutparentrule',
   
    config: {
        /*
        * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
        * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
        */

        // discovered in app.js, passed on crea
        portfolioItemTypes:[],
        //model: 'PortfolioItem/Feature - types loaded in base class.',
        model: null,
        label: 'Epic No Parent'

    },
    constructor: function(config) {
        Ext.apply(this,config);
        this.model = this.portfolioItemTypes[2];
        this.label = this.getLabel();
    },
    getDescription: function() {
        console.log("ThemeNoParent.getDescription:",this);
        
        var msg = Ext.String.format(
            "{0} must have a parent *{1}*.",
            /[^\/]*$/.exec(this.model),
            /[^\/]*$/.exec(this.portfolioItemTypes[3])
            );
        return msg;
    },
    
    getFetchFields: function() {
        return ['Name','Project','Parent'];
    },

    getLabel: function(){
        this.label = Ext.String.format(
            "{0} no parent {1}",
            /[^\/]*$/.exec(this.getModel()),
            /[^\/]*$/.exec(this.portfolioItemTypes[3])
        );
        return this.label;
    },

    isValidField: function(model, field_name) {
        var field_defn = model.getField(field_name);
        return ( !Ext.isEmpty(field_defn) );
    },
    
    applyRuleToRecord: function(record) {
        console.log("ThemeNoParent.applyRuleToRecord:",record);        
        
        if (record.get('Parent') == null) {
            return this.getDescription();               
        } else {
            return null; // no rule violation
        }
    },
    
    getFilters: function() {        
       // return Rally.data.wsapi.Filter.and([
       //     {property:'Parent',operator:'=',value:null}
       // ]);
       return [];
    }
});
Ext.define('CA.techservices.validator.Validator',{
    alias: 'widget.tsvalidator',
    
    
    /**
     * 
     * [{rule}] An array of validation rules
     */
    rules: [],
    
    /**
     * 
     */
    deliveryTeamProjects: [],       // listing of projects where a SCHEDULED feature might reside

    businessPlanningProjects: [],   // listing of programs where an UNSCHEDULED feature might reside
    
    recordsByModel: {},
    
    categoryField: 'Project',
    
    // fields that all rules should fetch
    fetchFields: [],
    /**
     * 
     * a hash containing events for a data point e.g.,
     * 
     * points will include a field called _records holding the associated records
     * and each record will have a field called __ruleText holding a statement about
     * its violation
     * 
     *     {
     *          click: function() {
     *          me.showDrillDown(this._records,this._name);
     *      }
     */
    pointEvents: null,
    /**
     * 
     * a hash of filters by model type.  Filter will be ANDed to the filters we get from the validation rules 
     * (which are themselves ORed together).
     */
    baseFilters: {},
    
    constructor: function(config) {
        Ext.apply(this,config);
        
        var rules = [];
        
        Ext.Array.each(this.rules, function(rule){
            var name = rule.xtype;
            if ( !Ext.isEmpty(name) ) {
                delete rule.xtype;
                console.log('Initializing ', name);
                rules.push(Ext.createByAlias('widget.' + name, rule));
            }
        });
        
        this.rules = rules;
    },
    
    getRuleDescriptions: function() {
        var text = "<ul>";
        
        Ext.Array.each(this.getActiveRules(), function(rule){
            var rule_description = rule.getDescription() || "";
            if ( !Ext.isEmpty(rule_description) ) {
                text = text + "<li>" + rule_description + "</li>";
            }
        });
        text = text + "</ul>";
        
        return text;
    },
    
    getRules: function(){
        return this.rules;
    },
    
    getActiveRules: function(){
        return Ext.Array.filter(this.getRules(),function(rule){
                return rule.active;
            });
    },

    getFiltersByModel: function() {
        var me = this,
            filters_by_model = {};
            
        Ext.Array.each(this.getActiveRules(), function(rule){
            var model = rule.getModel();
            var filters = rule.getFilters();

            if ( !Ext.isEmpty(model) && !Ext.isEmpty(filters) ) {
                if ( Ext.isEmpty(filters_by_model[model]) ) {
                    filters_by_model[model] = [];
                }
                filters_by_model[model].push(filters);
            }
        });
        
        Ext.Object.each(filters_by_model, function(model, filters){
            filters = Ext.Array.unique( Ext.Array.flatten(filters) );
            filters_by_model[model] = Rally.data.wsapi.Filter.or(filters);
            
            if ( me.baseFilters && me.baseFilters != {} && me.baseFilters[model] != {} ) {
                filters_by_model[model] = filters_by_model[model].and(me.baseFilters[model]);
            }
        });
        
        return filters_by_model;
    },
    
    getFetchFieldsByModel: function() {
        var me = this,
            fields_by_model = {};
            
        Ext.Array.each(this.getActiveRules(), function(rule){
            var model = rule.getModel();
            var fields = rule.getFetchFields();

            if ( !Ext.isEmpty(model) && !Ext.isEmpty(fields) && fields.length > 0 ) {
                if ( Ext.isEmpty(fields_by_model[model]) ) {
                    fields_by_model[model] = [me.categoryField,'Name'];
                }
                fields_by_model[model].push(fields);
            }
        });
        
        Ext.Object.each(fields_by_model, function(model, fields){
            fields = Ext.Array.flatten(fields);
            fields = Ext.Array.push(fields, me.fetchFields);
            
            fields_by_model[model] = Ext.Array.unique(fields);
        });
        
        return fields_by_model;
    },
    
    // returns a promise, promise fulfilled by hash of results by model type
    gatherData: function() {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
                
        console.log("gatherData:");

        var fetch_by_model = this.getFetchFieldsByModel();
        var filters_by_model = this.getFiltersByModel();
        
        console.log("gatherData: fetch_by_model",fetch_by_model);

        var promises = [];
        Ext.Object.each(fetch_by_model, function(model, fetch){
            var config = {
                model: model,
                fetch: fetch,
                limit: Infinity,
                filters: filters_by_model[model]
            };
            
            promise = function() {
                return this._loadWsapiRecords(config);
            };
            promises.push(promise);
        },this);
        
        Deft.Chain.sequence(promises,this).then({
            success: function(results) {
                me.recordsByModel = {};
                Ext.Array.each(results, function(result) {
                    me.recordsByModel = Ext.apply(me.recordsByModel, result);
                });
                deferred.resolve(results);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    getChartData: function() {
        if ( this.recordsByModel == {} ) {
            console.log('No search results');
            return {};
        }
        
        var categories = this.getCategories();
        var series = this.getSeries(categories);
        
        return { series: series, categories: categories };
        
    },
    
    getCategories: function() {
        var me = this,
            records = Ext.Array.flatten(Ext.Object.getValues(this.recordsByModel));
        
        var category_field = this.categoryField;
        
        var possible_categories = Ext.Array.map(records, function(record) {
            return me.getCategoryFromRecord(record,category_field);
        });
        
        return Ext.Array.unique(possible_categories);
    },
    
    getCategoryFromRecord: function(record,category_field) {
        if ( Ext.isEmpty(record.get(category_field)) ) { return ""; }
        if ( Ext.isString(record.get(category_field)) ) { return record.get(category_field); }
        return record.get(category_field)._refObjectName;
    },
    
    getSeries: function(categories) {
        var me = this,
            category_field = me.categoryField,
            series = [];
            
        // one series per rule, one stack per model type
        Ext.Array.each(this.getActiveRules(), function(rule){
            var series_name = rule.getUserFriendlyRuleLabel();
            var model = rule.getModel();
            var records = me.recordsByModel[model];
            
            var failed_records = me.getFailedRecordsForRule(records, rule);

            var records_by_category = me.getRecordsByCategory(failed_records, categories, category_field);
            
            var data = [];
            Ext.Array.each(categories, function(category){
                var category_records = records_by_category[category] || [];
                
                var count = category_records.length;
                var datum = { 
                    y: count,
                    _records: category_records,
                    _name: series_name
                };
                
                if ( !Ext.isEmpty(me.pointEvents) ) {
                    datum.events = me.pointEvents
                }
                data.push(datum);
            });
            series.push({
                name: series_name,
                
                records: failed_records,
                data: data,
                stack: model
            });
        });
        
        return series;
    },
    
    getFailedRecordsForRule: function(records, rule) {
        var failed_records = [];
        Ext.Array.each(records, function(record) {
            var failure = rule.applyRuleToRecord(record);
            if ( failure ) {
                var texts = record.get('__ruleText') || [];
                texts.push(failure);
                record.set('__ruleText', texts);
                failed_records.push(record);
            }
        });
        
        return failed_records;
    },
    
    getRecordsByCategory: function(records, categories, category_field) {
        var me = this,
            record_hash = {};
            
        Ext.Array.each(records, function(record){
            var category = me.getCategoryFromRecord(record,category_field);
            if ( Ext.isEmpty(record_hash[category]) ) {
                record_hash[category] = [];
            }
            record_hash[category].push(record);
        });
        
        return record_hash;
    },
    
    getPrecheckResults: function() {        
        var promises = Ext.Array.map(this.getActiveRules(), function(rule){
            return function() {
                return rule.precheckRule();
            };
        });
        
        if ( promises.length === 0 ) {
            return null;
        }
        
        return Deft.Chain.sequence(promises);
    },
    
    _loadWsapiRecords: function(config) {
        var deferred = Ext.create('Deft.Deferred');
        
        TSUtilities.loadWsapiRecords(config).then({
            success: function(results) {
                var result = {};
                result[config.model] = results;
                deferred.resolve(result);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    }
});
Ext.define("TSValidationApp", {
extend: 'CA.techservices.app.ChartApp',
    
    description: '<strong>Data Validation</strong>' +
                '<p/>' + 
                'The stacked bar chart shows a count of items that fail the various validation rules.  Each bar ' +
                'represents a team and record type.  For a story to be evaluated, it needs to be either In-Progress or Completed or ' +
                'Defined (when also Ready).  For a task to be evaluated, its story needs to meet the same state rule.' +
                '<p/>' + 
                '<strong>Rules</strong>' +
                '<p/>',
    
    integrationHeaders : {
        name : "TSValidationApp"
    },

    config: {
        defaultSettings: {
            showPatterns: false,
            showStoryRules: true,
            showTaskRules: false
        }
    },

    rulesByType: {
        Task: [
            {xtype:'tstaskrequiredfieldrule',  requiredFields: ['Owner']},
            {xtype:'tstasktodonoestimate'},
            {xtype:'tstaskactivenotodo'},
            {xtype:'tstaskcompletednoactuals'}
        ],
        HierarchicalRequirement: [
            {xtype:'tsstoryrequiredfieldrule', 
                requiredFields: ['Release','Owner','Description','Feature',
                    'c_AcceptanceCriteria','c_Type','c_IsTestable']},
            {xtype:'tsstorycompletednoactuals'},
            {xtype:'tsstorywithoutepmsid'},
            {xtype:'tsstorynonullplanestimaterule' }
        ],
        PortfolioItem: [ 
            {xtype:'tsfeaturerequiredfieldrule', 
                requiredFields: ['State','PreliminaryEstimate','RefinedEstimate',
                    'Release','Owner','Description','PlannedStartDate',
                    'PlannedEndDate','Project','Owner']}   // need EPMSID, Parity field names.
        ],
        FeatureNoParent: [ 
        ],
        ProjectEpicNoParent: [ 
        ],
        EPMSProjectNoParent: [ 
        ],        
        InitiativeNoParent: [ 
        ],        
        ObjectiveNoParent: [ 
        ]         
    },
    
    launch: function() {
        this.callParent();
        
        this._addSelectors();
        
        this.validator = this._instantiateValidator();
        
        this.description = this.description + this.validator.getRuleDescriptions();
        
        this.validator.getPrecheckResults().then({
            scope: this,
            success: function(issues) {
                
                var messages = Ext.Array.filter(issues, function(issue){
                    return !Ext.isEmpty(issue);
                });
                
                if ( messages.length > 0 ) {
                    var append_text = "<br/><b>Precheck Issues:</b><br/><ul>";
                    Ext.Array.each(messages, function(message){
                        append_text += '<li>' + message + '</li>';
                    });
                    append_text += "</ul>";
                    
                    this.description = this.description + " " + append_text;
                }
                
                this.setDescription();
                this._updateData();
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem with precheck', msg);
            }
        });
        
    },
    
    _updateData: function() {
        var me = this;
        this.setLoading("Loading data...");
        
        Deft.Chain.pipeline([
            function() { 
                me.setLoading("Gathering data...");
                return me.validator.gatherData(); 
            },
            function() { 
                me.setLoading("Analyzing data...");
                return me.validator.getChartData(); 
            }
        ]).then({
            scope: this,
            success: function(results) {
                
                if ( results.categories && results.categories.length === 0 ) {
                    Ext.Msg.alert('','No violations found');
                    return;
                }
                
                this.display_rows = Ext.Object.getValues( this.validator.recordsByModel );
                
                this._makeChart(results);
                this.down('#export_button').setDisabled(false);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem loading data', msg);
            }
        }).always(function() { me.setLoading(false); });
        
    }, 
    
    _instantiateValidator: function() {
        var me = this;
        
        var story_base_filter = Rally.data.wsapi.Filter.or([
            {property:'ScheduleState', value:'Completed' },
            {property:'ScheduleState', value:'In-Progress'}
        ]);
        
        var story_ready_filter = Rally.data.wsapi.Filter.and([
            {property:'ScheduleState', value: 'Defined' },
            {property:'Ready', value: true }
        ]);
        
        var task_base_filter = Rally.data.wsapi.Filter.or([
            {property:'WorkProduct.ScheduleState', value:'Completed' },
            {property:'WorkProduct.ScheduleState', value:'In-Progress'}
        ]);
        
        var task_ready_filter = Rally.data.wsapi.Filter.and([
            {property:'WorkProduct.ScheduleState', value: 'Defined' },
            {property:'WorkProduct.Ready', value: true }
        ]);
        
        console.log("_instantiateValidator:", "just before rules", this.down('#featureNoEpicCheckBox').value);
        
        var rules = [];
        if ( this.getSetting('showStoryRules') ) {
            rules = Ext.Array.push(rules, this.rulesByType['HierarchicalRequirement']);
        }
        if ( this.getSetting('showTaskRules') ) {
            rules = Ext.Array.push(rules, this.rulesByType['Task']);
        }
        if ( this.getSetting('showPortfolioItemRules') ) {
            rules = Ext.Array.push(rules, this.rulesByType['Task']);
        }
        
        var validator = Ext.create('CA.techservices.validator.Validator',{
            rules: rules,
            fetchFields: ['FormattedID','ObjectID'],
            baseFilters: {
                HierarchicalRequirement: story_base_filter.or(story_ready_filter),
                Task: task_base_filter.or(task_ready_filter)
            },
            pointEvents: {
                click: function() {
                    me.showDrillDown(this._records,this._name);
                }
            }
        });
        
        return validator;
    },
    
    _addSelectors: function() {
        var container = this.down('#banner_box');
        container.removeAll();
        
        container.add({
            xtype:'rallybutton',
            itemId:'rules_button',
            cls: 'secondary',
            text: 'Select Rules',
            disabled: false,
            listeners: {
                scope: this,
                click: function() {
                    this._showRulesSelection();
                }
            }
        });

        container.add({xtype:'container',flex: 1});
        
        container.add({
            xtype:'rallybutton',
            itemId:'export_button',
            cls: 'secondary',
            text: '<span class="icon-export"> </span>',
            disabled: true,
            listeners: {
                scope: this,
                click: function() {
                    this._export();
                }
            }
        });
    },
    
    _makeChart: function(data) {
        var me = this;
        
        this.logger.log('_makeChart', data);
        var colors = CA.apps.charts.Colors.getConsistentBarColors();
        
        if ( this.getSetting('showPatterns') ) {
            colors = CA.apps.charts.Colors.getConsistentBarPatterns();
        }
        
        this.setChart({
            chartData: data,
            chartConfig: this._getChartConfig(),
            chartColors: colors
        });
    },
    
    _getChartConfig: function() {
        var me = this;
        
        
        var title_prefix = "";
        if ( this.getSetting('showStoryRules') && !this.getSetting('showTaskRules') ) {
            title_prefix = "Story ";
        }
        if ( this.getSetting('showTaskRules') && !this.getSetting('showStoryRules')) {
            title_prefix = "Task ";
        }
        
        return {
            chart: { type:'column' },
            title: { text: title_prefix + 'Validation Results' },
            xAxis: {},
            yAxis: { 
                min: 0,
                title: { text: 'Count' }
            },
            plotOptions: {
                column: {
                    stacking: 'normal'
                }
            }
        }
    },
    
    showDrillDown: function(records, title) {
        var me = this;

        var store = Ext.create('Rally.data.custom.Store', {
            data: records,
            pageSize: 2000
        });
        
        Ext.create('Rally.ui.dialog.Dialog', {
            id        : 'detailPopup',
            title     : title,
            width     : 500,
            height    : 400,
            closable  : true,
            layout    : 'border',
            items     : [
            {
                xtype                : 'rallygrid',
                region               : 'center',
                layout               : 'fit',
                sortableColumns      : true,
                showRowActionsColumn : false,
                showPagingToolbar    : false,
                columnCfgs           : [
                    {
                        dataIndex : 'FormattedID',
                        text: "id"
                    },
                    {
                        dataIndex : 'Name',
                        text: "Name",
                        flex: 1
                    },
                    {
                        dataIndex: '__ruleText',
                        text: 'Violations',
                        flex: 2,
                        renderer: function(value, meta, record) {
                            if ( Ext.isEmpty(value) ) { return ""; }
                            var display_value = "";
                            Ext.Array.each(value, function(violation){
                                display_value = display_value + Ext.String.format("<li>{0}</li>", violation);
                            });

                            return Ext.String.format("<ul>{0}</ul>", display_value);
                        }
                    }
                ],
                store : store
            }]
        }).show();
    },
    _showRulesSelection: function() {
        var me = this;

        Ext.create('Rally.ui.dialog.Dialog', {
            id        : 'rulesSelectionPopup',
            title     : "Rules Selection",
            disableScroll: false,
            width     : 300,
            height    : 400,
            autoShow: true,
            draggable: true,

            closable  : true,
            //layout    : 'border',
            items     : [
            {
                xtype: 'rallycheckboxfield',
                fieldLabel: 'Feature wo Epic ',
                name: 'featureNoEpic',
                itemId: 'featureNoEpicCheckBox',
                stateful: true,
                stateId: 'featureNoEpicCheckBox',
                stateEvents: ['change'],
                value: true,
                listeners: {
                        scope: this,
                        change: function() {
                            this._updateData();
                        },
                    }            
            },
            {
            xtype: 'rallycheckboxfield',
            fieldLabel: 'Epic wo EPMSID ',
            name: 'epicNoEPMS',
            itemId: 'epicNoEPMSCheckBox',
            stateful: true,
            stateId: 'epicNoEPMSCheckBox',
            stateEvents: ['change'],
            value: true,
            listeners: {
                    scope: this,
                    change: function() {
                        this._updateData();
                    },
                }            
            },
            {
            xtype: 'rallycheckboxfield',
            fieldLabel: 'EPMS wo Initiative',
            name: 'epmsNoInitiative',
            itemId: 'epmsNoInitiativeCheckBox',
            stateful: true,
            stateId: 'epmsNoInitiativeCheckBox',
            stateEvents: ['change'],
            value: true,
            listeners: {
                    scope: this,
                    change: function() {
                        this._updateData();
                    },
                }            
            },
            {
            xtype: 'rallycheckboxfield',
            fieldLabel: 'Initiative wo Objective',
            name: 'initiativeNoObjective',
            itemId: 'initiativeNoObjectiveCheckBox',
            stateful: true,
            stateId: 'initiativeNoObjectiveCheckBox',
            stateEvents: ['change'],
            value: true,
            listeners: {
                    scope: this,
                    change: function() {
                        this._updateData();
                    },
                }            
            },
            {
            xtype: 'rallycheckboxfield',
            fieldLabel: 'Objective wo Goal',
            name: 'objectiveNoGoal',
            itemId: 'objectiveNoGoalCheckBox',
            stateful: true,
            stateId: 'objectiveNoGoalCheckBox',
            stateEvents: ['change'],
            value: true,
            listeners: {
                    scope: this,
                    change: function() {
                        this._updateData();
                    },
                }            
            },        
            {
            xtype: 'rallycheckboxfield',
            fieldLabel: 'Objective wo Goal',
            name: 'storyRules',
            itemId: 'storyRulesCheckBox',
            stateful: true,
            stateId: 'storyRulesCheckBox',
            stateEvents: ['change'],
            value: true,
            listeners: {
                    scope: this,
                    change: function() {
                        this._updateData();
                    },
                }            
            },
            {
            xtype: 'rallycheckboxfield',
            fieldLabel: 'Task Rules',
            name: 'storyRules',
            itemId: 'taskRulesCheckBox',
            stateful: true,
            stateId: 'taskRulesCheckBox',
            stateEvents: ['change'],
            value: true,
            listeners: {
                    scope: this,
                    change: function() {
                        this._updateData();
                    },
                }            
            }           

// container.add({
//             xtype: 'rallycheckboxfield',
//             columnWidth: '25%',
//             margin: 10,
//             labelSeparator: " ",
//             boxLabel: 'Feature wo Epic ',
//             boxLabelAlign: 'after',
//             name: 'featureNoEpic',
//             itemId: 'featureNoEpicCheckBox',
//             stateful: true,
//             stateId: 'featureNoEpicCheckBox',
//             stateEvents: ['change'],
//             value: true,
//             listeners: {
//                     scope: this,
//                     change: function() {
//                         this._updateData();
//                     },
//                 }            
//             });
//         container.add({
//             xtype: 'rallycheckboxfield',
//             columnWidth: '25%',
//             margin: 10,
//             labelSeparator: " ",
//             boxLabel: 'Epic wo EPMSID ',
//             boxLabelAlign: 'after',
//             name: 'epicNoEPMS',
//             itemId: 'epicNoEPMSCheckBox',
//             stateful: true,
//             stateId: 'epicNoEPMSCheckBox',
//             stateEvents: ['change'],
//             value: true,
//             listeners: {
//                     scope: this,
//                     change: function() {
//                         this._updateData();
//                     },
//                 }            
//             });
//         container.add({
//             xtype: 'rallycheckboxfield',
//             columnWidth: '25%',
//             margin: 10,
//             labelSeparator: " ",
//             boxLabel: 'EPMS wo Initiative',
//             boxLabelAlign: 'after',
//             name: 'epmsNoInitiative',
//             itemId: 'epmsNoInitiativeCheckBox',
//             stateful: true,
//             stateId: 'epmsNoInitiativeCheckBox',
//             stateEvents: ['change'],
//             value: true,
//             listeners: {
//                     scope: this,
//                     change: function() {
//                         this._updateData();
//                     },
//                 }            
//             });
//         container.add({
//             xtype: 'rallycheckboxfield',
//             columnWidth: '25%',
//             margin: 10,
//             labelSeparator: " ",
//             boxLabel: 'Initiative wo Objective',
//             boxLabelAlign: 'after',
//             name: 'initiativeNoObjective',
//             itemId: 'initiativeNoObjectiveCheckBox',
//             stateful: true,
//             stateId: 'initiativeNoObjectiveCheckBox',
//             stateEvents: ['change'],
//             value: true,
//             listeners: {
//                     scope: this,
//                     change: function() {
//                         this._updateData();
//                     },
//                 }            
//             });

//         container.add({
//             xtype: 'rallycheckboxfield',
//             columnWidth: '25%',
//             margin: 10,
//             labelSeparator: " ",
//             boxLabel: 'Objective wo Goal',
//             boxLabelAlign: 'after',
//             name: 'objectiveNoGoal',
//             itemId: 'objectiveNoGoalCheckBox',
//             stateful: true,
//             stateId: 'objectiveNoGoalCheckBox',
//             stateEvents: ['change'],
//             value: true,
//             listeners: {
//                     scope: this,
//                     change: function() {
//                         this._updateData();
//                     },
//                 }            
//             });
        
//         container.add({
//             xtype: 'rallycheckboxfield',
//             columnWidth: '25%',
//             margin: 10,
//             labelSeparator: " ",
//             boxLabel: 'Objective wo Goal',
//             boxLabelAlign: 'after',
//             name: 'storyRules',
//             itemId: 'storyRulesCheckBox',
//             stateful: true,
//             stateId: 'storyRulesCheckBox',
//             stateEvents: ['change'],
//             value: true,
//             listeners: {
//                     scope: this,
//                     change: function() {
//                         this._updateData();
//                     },
//                 }            
//             });
//         container.add({
//             xtype: 'rallycheckboxfield',
//             columnWidth: '25%',
//             margin: 10,
//             labelSeparator: " ",
//             boxLabel: 'Task Rules',
//             boxLabelAlign: 'after',
//             name: 'storyRules',
//             itemId: 'taskRulesCheckBox',
//             stateful: true,
//             stateId: 'taskRulesCheckBox',
//             stateEvents: ['change'],
//             value: true,
//             listeners: {
//                     scope: this,
//                     change: function() {
//                         this._updateData();
//                     },
//                 }            
//             });            
                

            ]
        }).show();
    },
    
    _export: function(){
        var me = this;
        this.logger.log('_export');
        
        var grid = this.down('rallygrid');
        var rows = Ext.Array.flatten( this.display_rows );
        
        rows = Ext.Array.map(rows, function(row) { return row.data; });
        
        this.logger.log('number of rows:', rows.length);
        
        if (!rows ) { return; }
        
        var store = Ext.create('Rally.data.custom.Store',{ data: rows });
        
        if ( !grid ) {
            grid = Ext.create('Rally.ui.grid.Grid',{
                store: store,
                columnCfgs: [{
                    dataIndex: 'FormattedID',
                    text: 'ID'
                },
                {
                    dataIndex: 'Name',
                    text: 'Name'
                },
                {
                    dataIndex: 'Project',
                    text: 'Project',
                    renderer: function(value,meta,record){
                        if ( Ext.isEmpty(value) ) { 
                            return "";
                        }
                        return value._refObjectName
                    }
                },
                {
                    dataIndex: '__ruleText',
                    text:'Rules',
                    renderer: function(value,meta,record){                        
                        return value.join('\r\n');
                    }
                }
                
                ]
            });
        }
        
        var filename = 'timesheet-report.csv';

        this.logger.log('saving file:', filename);
        
        this.setLoading("Generating CSV");
        Deft.Chain.sequence([
            function() { return Rally.technicalservices.FileUtilities.getCSVFromRows(this,grid,rows); } 
        ]).then({
            scope: this,
            success: function(csv){
                this.logger.log('got back csv ', csv.length);
                if (csv && csv.length > 0){
                    Rally.technicalservices.FileUtilities.saveCSVToFile(csv,filename);
                } else {
                    Rally.ui.notify.Notifier.showWarning({message: 'No data to export'});
                }
                
            }
        }).always(function() { me.setLoading(false); });
    },
    
    getSettingsFields: function() {
        return [
        { 
            name: 'showPatterns',
            xtype: 'rallycheckboxfield',
            boxLabelAlign: 'after',
            fieldLabel: '',
            margin: '0 0 25 200',
            boxLabel: 'Show Patterns<br/><span style="color:#999999;"><i>Tick to use patterns in the chart instead of color.</i></span>'
        },
        { 
            name: 'showStoryRules',
            xtype: 'rallycheckboxfield',
            boxLabelAlign: 'after',
            fieldLabel: '',
            margin: '0 0 25 200',
            boxLabel: 'Show Story Rules<br/><span style="color:#999999;"><i>Tick to apply rules for Stories.</i></span>'
        },
        { 
            name: 'showTaskRules',
            xtype: 'rallycheckboxfield',
            boxLabelAlign: 'after',
            fieldLabel: '',
            margin: '0 0 25 200',
            boxLabel: 'Show Task Rules<br/><span style="color:#999999;"><i>Tick to apply rules for Tasks.</i></span>'
        }
        ];
    }
});

Ext.define("TSValidationApp", {
extend: 'CA.techservices.app.ChartApp',
    // need an array of descriptions - 1 for each chartbox containers
    // need at least one or the container won't be initialized
    descriptions: ['<strong>Data Validation</strong>' +
                '<p/>' + 
                'The stacked bar chart shows a count of items that fail the various validation rules.  Each bar ' +
                'represents a team and record type.  For a story to be evaluated, it needs to be either In-Progress or Completed or ' +
                'Defined (when also Ready).  For a task to be evaluated, its story needs to meet the same state rule.' +
                '<p/>' + 
                '<strong>Rules</strong>' +
                '<p/>'], 
    
    integrationHeaders : {
        name : "TSValidationApp"
    },

    config: {
        chartLabelRotationSettings:{
            rotateNone: 0,
            rotate45: 5,
            rotate90: 10 
        },        
        defaultSettings: {
            showPatterns: false,
            showWrongProject: 'false',
            rotateChartLabels45: 5, // how many categories (projects) before we rotate the labels
            rotateChartLabels90: 10 // how many categories (projects) before we rotate the labels        
        },
        rootStrategyProject: null,
        rootDeliveryProject: null,
    },
    
    stateId: 'CA.techservices.TSValidationApp.state', // automatically save a cookie (each app needs unique stateId)
    stateful: true,
    initialActiveRules: [],         // a listing of the xtypes of active rules (saved for each user)
    
    strategyProjects:[],            // array of projects that are in the strategy branch of project hierarchy
    deliveryTeamProjects:[],        // array of projects that are in the execution/delivery team branch
    
    getState: function() {
        // persisting state
        var state = {};
        console.log("app.getState0",this.initialActiveRules,this.validator);

        if (this.validator){
            var active = Ext.Array.map(this.validator.getActiveRules(), function(rule){
                return rule.xtype;
            });
            state = {
                initialActiveRules: active
            };
        } else {
            state = {initialActiveRules: this.initialActiveRules};
        }
        
        // clear out before saving.
        state.strategyProjects = [];
        state.strategyProjects = this.strategyProjects;

        state.deliveryTeamProjects = [];
        state.deliveryTeamProjects = this.deliveryTeamProjects;

        console.log('app.getState1: ', state);

        return state;
    },


    applyState: function(state) {
        console.log('app.applyState:',state);

        // rehydrating state...
        this.callParent(arguments);
        if ( state.hasOwnProperty('initialActiveRules') ) {
            this.initialActiveRules = state.initialActiveRules;
        }
        if (state.hasOwnProperty('strategyProjects')) {
            this.strategyProjects = state.strategyProjects;
        }
        if (state.hasOwnProperty('deliveryTeamProjects')) {
            this.deliveryTeamProjects = state.deliveryTeamProjects;
        }
    },

    rulesByType: {
        Task: [
            {xtype:'tstaskrequiredfieldrule',  requiredFields: ['Owner']},
            {xtype:'tstasktodonoestimate'},
            {xtype:'tstaskactivenotodo'},
            {xtype:'tstaskcompletednoactuals'}
        ],
        HierarchicalRequirement: [
            {xtype:'tsstoryrequiredfieldrule', requiredFields: ['Release','Owner','Description','Feature',
                'c_AcceptanceCriteria','c_Type','c_IsTestable']},
            {xtype:'tsstorycompletednoactuals'},
            {xtype:'tsstorywithoutepmsid'},
            {xtype:'tsstorynonullplanestimaterule' },
            {xtype: 'tsstorywithfeatureandfeatureprojectnotdeliveryroot'}            
        ],
        PortfolioItem: [            
            {xtype: 'tsfeaturewithoutparentrule'},
            {xtype: 'tsepicwithoutparentrule'},
            {xtype: 'tsthemewithoutparentrule'},
            {xtype: 'tspi3withoutparentrule'},
            {xtype: 'tspi4withoutparentrule'},
            {xtype: 'tsthemewithoutepmsidrule'},
            {xtype: 'tsfeaturenoplannedstartenddaterule'},
            {xtype: 'tsthemenoplannedstartenddaterule'}
        ],
        PortfolioItemProject: [            
            {xtype:'tsfeatureunscheduledprojectnotstrategyrootrule'},
            {xtype: 'tsfeaturescheduledprojectnotdeliveryrootrule'}
        ]
    },
    
    launch: function() {
        this.callParent();
        
        // dynamically lookup portfolio item type names
        this._fetchPortfolioItemTypes().then({
            success: this._initializeApp, 
            failure: this._showErrorMsg,
            scope: this
        });  
    },

    _initializeApp: function(portfolioItemTypes){
        var me = this;
        // do layout and configs
        this.chartLabelRotationSettings.rotate45 = this.getSetting('rotateChartLabels45');
        this.chartLabelRotationSettings.rotate90 = this.getSetting('rotateChartLabels90');

        // add the array to the app.
        me.portfolioItemTypes = portfolioItemTypes;
        
        this.setLoading("Configuring rules ...");
        
        // configure the rules
        me._configureRules();

        // setup filter rule configs
        var story_base_filter = Rally.data.wsapi.Filter.or([
            {property:'ScheduleState', value:'Completed' },
            {property:'ScheduleState', value:'In-Progress'}
        ]);
        
        var story_ready_filter = Rally.data.wsapi.Filter.and([
            {property:'ScheduleState', value: 'Defined' },
            {property:'Ready', value: true }
        ]);
        this.story_filter = story_base_filter.or(story_ready_filter);

        var task_base_filter = Rally.data.wsapi.Filter.or([
            {property:'WorkProduct.ScheduleState', value:'Completed' },
            {property:'WorkProduct.ScheduleState', value:'In-Progress'}
        ]);
        
        var task_ready_filter = Rally.data.wsapi.Filter.and([
            {property:'WorkProduct.ScheduleState', value: 'Defined' },
            {property:'WorkProduct.Ready', value: true }
        ]);
        this.task_filter = task_base_filter.or(task_ready_filter);

        this.setLoading("Creating Validator ...");
        // create the validator object
        this.validator = this._instantiateValidator();

        // add any selectors required
        this._addSelectors();
        
        // go get the data
        me._loadData();
    },

    _addSelectors: function() {
        var me = this;

        var container = this.down('#banner_box');
        container.removeAll();
        
        container.add({xtype:'container',flex: 1});

        console.log('app._addSelectors:',me.getSettings('showWrongProject'));

        if (me.getSetting('showWrongProject')){ // only add the boxes when the appSettings enable it.
            container.add({
                xtype:'rallybutton',
                itemId:'business_project_selection_button',
                cls: 'secondary',
                text: 'Business Planning', // USPTO calls 'Business Planning (Strategy)'
                disabled: false,
                listeners: {
                    scope: this,
                    click: function() {
                        console.log('addSelectors._showBusinessPlanning: ');
                        this._showBusinessPlanningSelection();
                    }
                }
            });

            container.add({
                xtype:'rallybutton',
                itemId:'delivery_teams_selection_button',
                cls: 'secondary',
                text: 'Delivery Teams', // USPTO calls 'Delivery Teams'
                disabled: false,
                listeners: {
                    scope: this,
                    click: function() {
                        console.log('addSelectors._showDeliveryTeamsSelection: ');
                        this._showDeliveryTeamsSelection();
                    }
                }
            });         
        } 
        
        container.add({
            xtype:'rallybutton',
            itemId:'rules_selection_button',
            //cls: 'secondary',
            cls: 'primary',
            text: 'Select Rules',
            disabled: false,
            listeners: {
                scope: this,
                click: function() {
                    console.log('addSelectors: ');

                    this._showRulesSelection();
                }
            }
        });
        // REMOVE EXPORT BUTTON (sr 2016-09-21)
        // container.add({
        //     xtype:'rallybutton',
        //     itemId:'export_button',
        //     cls: 'secondary',
        //     text: '<span class="icon-export"> </span>',
        //     disabled: true,
        //     listeners: {
        //         scope: this,
        //         click: function() {
        //             this._export();
        //         }
        //     }
        // });
    },

    _loadData:function(){
       
        // remove the last chart, have to redraw anyway
        this.clearChartBox(0);
       
        // as we set and reset the description, we need to not retain the previous rule descriptions.
        // separating the appDescription from the description accumulator allows us to handle them
        // independently.
        this.description = this.descriptions[0] + this.validator.getRuleDescriptions();

        this.setLoading("Performing prechecks...");
        var precheckResults = this.validator.getPrecheckResults();
        if (precheckResults == null){
            this._processPrecheckResults([]);
        } else {

            precheckResults.then({
                scope: this,
                success: this._processPrecheckResults,
                failure: function(msg) {
                    Ext.Msg.alert('Problem with precheck', msg);
                }
            });
        }               
    },

    _configureRules: function(){
        var me = this;

        // make rules array - visible throughout the app        
        this.ruleConfigs = [];
        
        // add the array of portfolioItem Type names to each portfolio rule as we instantiate it
        // also grab appSetting for a target folder to hold high-level portfolio items
        Ext.Array.each(me.rulesByType.PortfolioItemProject, function(rule){
            // get the collection of workspace specific portfolio item names per level            
            rule.portfolioItemTypes = me.portfolioItemTypes;

            // for rules that need to have a specific project folder for portfolio items
            rule.strategyProjects = me.strategyProjects;
            rule.deliveryTeamProjects = me.deliveryTeamProjects;
                        
            if ((me.initialActiveRules) && (Ext.Array.contains(me.initialActiveRules,rule.xtype))) { // match in array contents against second argument value
                rule.active = true;
            }
        });
    
        // add the array of portfolioItem Type names to each portfolio rule as we instantiate it
        // also grab appSetting for a target folder to hold high-level portfolio items
        Ext.Array.each(me.rulesByType.PortfolioItem, function(rule){
            // get the collection of workspace specific portfolio item names per level            
            rule.portfolioItemTypes = me.portfolioItemTypes;
  
            // for rules that need to have a specific project folder for portfolio items
            rule.strategyProjects = me.strategyProjects;
            rule.deliveryTeamProjects = me.deliveryTeamProjects;
                        
            if ((me.initialActiveRules) && (Ext.Array.contains(me.initialActiveRules,rule.xtype))) { // match in array contents against second argument value
                rule.active = true;
            }
        });
        // add the portfolio typepath names to the story rules, also the target project folders for strategy/delivery
        Ext.Array.each(me.rulesByType.HierarchicalRequirement, function(rule){
            // get the collection of workspace specific portfolio item names per level            
            rule.portfolioItemTypes = me.portfolioItemTypes;
  
            // for rules that need to have a specific project folder for portfolio items
            rule.strategyProjects = me.strategyProjects;
            rule.deliveryTeamProjects = me.deliveryTeamProjects;
                        
            // mark each rule Active - if it matches a rule in the activeRules array.            
            if ((me.initialActiveRules) && (Ext.Array.contains(me.initialActiveRules,rule.xtype))) { // match in array contents against second argument value
                rule.active = true;
            }
        });
        
        // add the portfolio typepath names to the task rules, also the target project folders for strategy/delivery
        Ext.Array.each(me.rulesByType.Task, function(rule){            
            // get the collection of workspace specific portfolio item names per level            
            rule.portfolioItemTypes = me.portfolioItemTypes;
  
            // for rules that need to have a specific project folder for portfolio items
            rule.strategyProjects = me.strategyProjects;
            rule.deliveryTeamProjects = me.deliveryTeamProjects;
                        
            // mark each rule Active - if it matches a rule in the activeRules array.            
            if ((me.initialActiveRules) && (Ext.Array.contains(me.initialActiveRules,rule.xtype))) { // match in array contents against second argument value
                rule.active = true;
            }
        });

        // Get all the ruleConfigs into the array
        if (me.getSetting('showWrongProject')) { // only enable these rules when allowed by appSettings
             this.ruleConfigs = Ext.Array.push(this.ruleConfigs, this.rulesByType['PortfolioItemProject']);
        }
        this.ruleConfigs = Ext.Array.push(this.ruleConfigs, this.rulesByType['PortfolioItem']);
        this.ruleConfigs = Ext.Array.push(this.ruleConfigs, this.rulesByType['HierarchicalRequirement']);
        this.ruleConfigs = Ext.Array.push(this.ruleConfigs, this.rulesByType['Task']);

    },

    _instantiateValidator: function() {
        var me = this;
                
        var validator = Ext.create('CA.techservices.validator.Validator',{
            rules: this.ruleConfigs,
            fetchFields: ['FormattedID','ObjectID'],
            baseFilters: {
                HierarchicalRequirement: this.story_filter, 
                Task: this.task_filter                
            },        
            pointEvents: {
                click: function() {
                    me.showDrillDown(this._records,this._name);
                }
            }
        });
        
        return validator;
    },

    _processPrecheckResults: function(issues){
        var messages = Ext.Array.filter(issues, function(issue){
            return !Ext.isEmpty(issue);
        });
        
        if ( messages.length > 0 ) {
            var append_text = "<br/><b>Precheck Issues:</b><br/><ul>";
            Ext.Array.each(messages, function(message){
                append_text += '<li>' + message + '</li>';
            });
            append_text += "</ul>";
            
            // note: appDescription is already combined with rulesText. 
            // This function appends the pre-check results to the existing combined description
            this.description = this.description + " " + append_text;
        }
        
        this.applyDescription(this.description, 0);
        this._updateData();
    },

    _updateData: function() {
        var me = this;
        this.setLoading("Loading data...");
        
        Deft.Chain.pipeline([
            function() { 
                me.setLoading("Gathering data...");
                return me.validator.gatherData(); 
            },
            function() { 
                me.setLoading("Analyzing data...");
                return me.validator.getChartData(); 
            }
        ]).then({
            scope: this,
            success: function(results) {
                
                if ( results.categories && results.categories.length === 0 ) {

                    Ext.Msg.alert('','No violations using the current rules. ' +
                        'Please select other rules and/or change your project selection.');
                    return;
                }
                
                this.display_rows = Ext.Object.getValues( this.validator.recordsByModel );
                
                this._makeChart(results);
                // REMOVE EXPORT BUTTON: sr 2016-09-21
                //this.down('#export_button').setDisabled(false);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem loading data', msg);
            }
        }).always(function() { me.setLoading(false); });
        
    },

    _makeChart: function(data) {
        var me = this;
        
        this.logger.log('_makeChart', data);
        var colors = CA.apps.charts.Colors.getConsistentBarColors();
        
        if ( this.getSetting('showPatterns') ) {
            colors = CA.apps.charts.Colors.getConsistentBarPatterns();
        }
        
        this.setChart({
            chartData: data,
            chartConfig: this._getChartConfig(data),
            chartColors: colors
        });
    },

    _getChartConfig: function(data) {
        var me = this;
        
        
        var title_prefix = "";
        // if ( this.getSetting('showStoryRules') && !this.getSetting('showTaskRules') ) {
        //     title_prefix = "Story ";
        // }
        // if ( this.getSetting('showTaskRules') && !this.getSetting('showStoryRules')) {
        //     title_prefix = "Task ";
        // }
        
        return {
            chart: { type:'column' },
            title: { text: title_prefix + 'Validation Results' },
            xAxis: {
                labels:{
                    rotation:this._rotateProjectLabels(data.categories.length)
                }
            },
           
            yAxis: { 
                min: 0,
                title: { text: 'Count' }
            },
            plotOptions: {
                column: {
                    stacking: 'normal'
                }
            }
        }
    },
    
    showDrillDown: function(records, title) {
        var me = this;

        var store = Ext.create('Rally.data.custom.Store', {
            data: records,
            pageSize: 2000
        });
        
        Ext.create('Rally.ui.dialog.Dialog', {
            id        : 'detailPopup',
            title     : title,
            width     : 500,
            height    : 400,
            closable  : true,
            layout    : 'border',
            items     : [
            {
                xtype                : 'rallygrid',
                region               : 'center',
                layout               : 'fit',
                sortableColumns      : true,
                showRowActionsColumn : false,
                showPagingToolbar    : false,
                columnCfgs           : [
                    {
                        dataIndex : 'FormattedID',
                        text: "id",
                        renderer: function(value,meta,record){
                            return Ext.String.format("<a href='{0}' target='_new'>{1}</a>",Rally.nav.Manager.getDetailUrl(record.get('_ref')),value);
                        }
                    },
                    {
                        dataIndex : 'Name',
                        text: "Name",
                        flex: 1
                    },
                    {
                        dataIndex: '__ruleText',
                        text: 'Violations',
                        flex: 2,
                        renderer: function(value, meta, record) {
                            if ( Ext.isEmpty(value) ) { return ""; }
                            var display_value = "";
                            Ext.Array.each(value, function(violation){
                                display_value = display_value + Ext.String.format("<li>{0}</li>", violation);
                            });

                            return Ext.String.format("<ul>{0}</ul>", display_value);
                        }
                    }
                ],
                store : store
            }]
        }).show();
    },

    _showBusinessPlanningSelection: function() {
        var me = this;

        console.log("_showBusinessPlanningSelection:");

        Ext.create('CA.technicalservices.ProjectTreePickerDialog',{
            
            title: 'Select the Business Planning projects',
            introText: 'Select the projects where your portfolio items should be.',
            initialSelectedRecords: me.strategyProjects,
            root_filters:   [
                {property: 'ObjectID',      // reads a top-level starting point from which to build-out the tree
                operator: '=',
                value: Rally.util.Ref.getOidFromRef(me.getSetting('strategyProjectPicker'))}
                ],

            listeners: {
                scope: this,
                itemschosen: function(items){
                    // save the data ref of each project - because preferences
                    // can choke on an instantiated class                  
                    me.strategyProjects = Ext.Array.map(items,function(item){
                        if (Ext.isFunction(item.getData)) {
                            item = item.getData();
                        }
                        return item;
                    });
                    this.logger.log("_showBusinessPlanningSelection:", items);
                    this.logger.log('--', this.strategyProjects);
                    this.saveState();

                    this._loadData();                    
                }    
            }
        }).show();
    },


    _showDeliveryTeamsSelection: function() {
        var me = this;

        console.log("showDeliveryTeam._showDeliveryTeamsSelection:",this.getSetting('deliveryProjectPicker'));

        Ext.create('CA.technicalservices.ProjectTreePickerDialog',{
            title: 'Select the Delivery Team projects',
            introText: 'Select the projects for the Delivery Teams',
            initialSelectedRecords: me.deliveryTeamProjects,
            root_filters: [
                {property: 'ObjectID',      // reads a top-level starting point from which to build-out the tree
                operator: '=',
                value: Rally.util.Ref.getOidFromRef(me.getSetting('deliveryProjectPicker'))}
                ],

            listeners: {
                scope: this,
                itemschosen: function(items){
                    // save the data ref of each project - because preferences can choke on fully instantiated classes
                    this.deliveryTeamProjects = Ext.Array.map(items,function(item){
                        if (Ext.isFunction(item.getData)){
                            item = item.getData();
                        }
                        return item;
                    });
                    this.logger.log('_showDeliveryTeamsSelection: ',items);
                    this.logger.log('--',this.deliveryTeamProjects);
                    this.saveState();

                    this._loadData();                    
                }    
            }
        }).show();
    },

    _showRulesSelection: function() {
        var me = this;
        var rules = this.validator.getRules();

        console.log("_showRulesSelection:",rules);

        Ext.create('CA.technicalservices.RulePickerDialog',{
            rules: rules,
            listeners: {
                scope: this,
                itemschosen: function(dialog,rules){
                    console.log('ShowRulesDialogItemsChosen:',dialog,rules);
                    this.validator.rules = rules;
                    this.saveState();
                    this._loadData();                    
                }    
            }
        }).show();
    },
    
    _export: function(){
        var me = this;
        this.logger.log('_export');
        
        var grid = this.down('rallygrid');
        var rows = Ext.Array.flatten( this.display_rows );
        
        rows = Ext.Array.map(rows, function(row) { return row.data; });
        
        this.logger.log('number of rows:', rows.length);
        
        if (!rows ) { return; }
        
        var store = Ext.create('Rally.data.custom.Store',{ data: rows });
        
        if ( !grid ) {
            grid = Ext.create('Rally.ui.grid.Grid',{
                store: store,
                columnCfgs: [{
                    dataIndex: 'FormattedID',
                    text: 'ID'
                },
                {
                    dataIndex: 'Name',
                    text: 'Name'
                },
                {
                    dataIndex: 'Project',
                    text: 'Project',
                    renderer: function(value,meta,record){
                        if ( Ext.isEmpty(value) ) { 
                            return "";
                        }
                        return value._refObjectName
                    }
                },
                {
                    dataIndex: '__ruleText',
                    text:'Rules',
                    renderer: function(value,meta,record){                        
                        return value.join('\r\n');
                    }
                }
                
                ]
            });
        }
        
        var filename = 'validator-report.csv';

        this.logger.log('saving file:', filename);
        
        this.setLoading("Generating CSV");
        Deft.Chain.sequence([
            function() { return Rally.technicalservices.FileUtilities.getCSVFromRows(this,grid,rows); } 
        ]).then({
            scope: this,
            success: function(csv){
                this.logger.log('got back csv ', csv.length);
                if (csv && csv.length > 0){
                    Rally.technicalservices.FileUtilities.saveCSVToFile(csv,filename);
                } else {
                    Rally.ui.notify.Notifier.showWarning({message: 'No data to export'});
                }
                
            }
        }).always(function() { me.setLoading(false); });
    },

    _fetchPortfolioItemTypes: function(){
        var deferred = Ext.create('Deft.Deferred');
        Ext.create('Rally.data.wsapi.Store',{
            model: 'typedefinition',
            fetch:['TypePath','Ordinal'],
            filters: [{property:'TypePath',operator:'contains',value:'PortfolioItem/'}],
            sorters: [{property:'Ordinal',direction:'ASC'}]
        }).load({
            callback: function(records,operation){
                if (operation.wasSuccessful()){
                    var portfolioItemArray = [];
                    Ext.Array.each(records,function(rec){
                        portfolioItemArray.push(rec.get('TypePath'));
                    });
                    deferred.resolve(portfolioItemArray);
                } else {
                    var message = 'failed to load Portfolio Item Types ' + (operation.error && operation.error.errors.join(','));
                    deferred.reject(message);
                }
            }
        })
        
        return deferred;
    },
    
    _rotateProjectLabels: function(project_count){
        
        var rotationSetting = 0;

        if (project_count <= this.chartLabelRotationSettings.rotate45) {
            rotationSetting = 0;
        } else if (project_count <= this.chartLabelRotationSettings.rotate90){
            rotationSetting =  45;
        } else { // full vertical rotation for more than 10 items (good for up-to about 20)
            rotationSetting =  90;
        }
        
        return rotationSetting;
    },

    _showErrorMsg: function(msg){
        Rally.ui.notify.Notifier.showError({message:msg});
    },

    getSettingsFields: function() {
        var me = this;

        return [
        {
         name: 'strategyProjectPicker',
         xtype: 'rallyprojectpicker',
         itemId: 'strategyProjectPicker',            
         fieldLabel: 'Choose the root Business Planning (Strategy) project:',
         showMostRecentlyUsedProjects: false,
         workspace: this.getContext().getWorkspaceRef(),
         labelAlign:'left',
         labelWidth: 300,
         labelPad: 10,
         stateful: true,
         stateId: 'strategyProjectPicker',
         stateEvents: ['change','select'],
         listeners: {
                scope: me,
                select: function(field,value,eOpts){
                    console.log('app.getSettings.strategyProjectPicker.select:',field,value,eOpts);                 
                },
                change: function(){
                    console.log('app.getSettings.strategyProjectPicker.change: ',this.getSelectedRecord());
                    me.rootStrategyProject = this.getSelectedRecord().get('Name');
                }    
            }
        },
        {
         name: 'deliveryProjectPicker',
         xtype: 'rallyprojectpicker',
         itemId: 'deliveryProjectPicker',            
         fieldLabel: 'Choose the root Delivery Team project:',
         showMostRecentlyUsedProjects: false,
         workspace: this.getContext().getWorkspaceRef(),
         labelAlign:'left',
         labelWidth: 300,
         labelPad: 10,
         stateful: true,
         stateId: 'deliveryProjectPicker',
         stateEvents: ['change','select'],
         listeners: {
                scope: me,
                select: function(field,value,eOpts){
                    console.log('app.getSettings.deliveryProjectPicker.select:',field,value,eOpts);                    
                },
                change: function(eOpts){
                    console.log('app.getSettings.strategyProjectPicker.change: ',eOpts);
                }    
            }
        },
        { 
            name: 'rotateChartLabels45',
            itemId: 'rotateChartLabels45',            
            xtype: 'rallynumberfield',
            fieldLabel: 'Rotate Chart Labels 45 degrees at this project count:',
            labelAlign:'left',
            labelWidth: 300,
            labelPad: 10,
            allowDecimals: false,
            allowExponential: false,
            autoStripChars: true,
            baseChars: '0123456789',
            maxValue: 20,
            minValue: 1
        },
        { 
            name: 'rotateChartLabels90',
            itemId: 'rotateChartLabels90',            
            xtype: 'rallynumberfield',
            fieldLabel: 'Rotate Chart Labels 90 degrees at this project count:',
            labelAlign:'left',
            labelWidth: 300,
            labelPad: 10,
            allowDecimals: false,
            allowExponential: false,
            autoStripChars: true,
            baseChars: '0123456789',
            maxValue: 30,
            minValue: 5
        },
        { 
            name: 'showWrongProject',
            xtype: 'rallycheckboxfield',
            fieldLabel: 'Enable selection of the two Feature Selection rules. Use the [Business Planning] and [Delivery Team] buttons to identify the correct projects for scheduled and unscheduled Features in your program.',
            labelAlign:'left',
            labelWidth: 300,
            labelPad: 10,
            padding: '0 0 50 0'  //top right bottom left
        },                
        { 
            name: 'showPatterns',
            xtype: 'rallycheckboxfield',
            //boxLabelAlign: 'after',
            //margin: '0 0 25 200',
            fieldLabel: 'Show Patterns<br/><span style="color:#999999;"><i>Tick to use patterns in the chart instead of color.</i></span>',
            labelAlign:'left',
            labelWidth: 300,
            labelPad: 10,
            padding: '0 0 50 0'  //top right bottom left
        }
        ];
    }
});
            
               Rally.launchApp('TSValidationApp', {
                   name: 'Validation App'
               });
        });
    </script>
    
    <style type="text/css">

.x-panel-body-info-box {
    color: black;
    font-size: 10px;
    background: white;
    padding: 5px;
}

.x-panel-info-box {
    border: 0px dashed blue;
}
    
.x-panel-header-info-box {
    background-color: #ddd;
    color: white;
    font-size: 14px;
}

.x-panel-header-info-box-vertical {
    padding: 3px;
    color: white;
}


.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>